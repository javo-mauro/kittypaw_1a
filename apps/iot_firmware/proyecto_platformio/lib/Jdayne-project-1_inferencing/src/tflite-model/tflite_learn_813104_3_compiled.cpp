/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 29.10.2025 13:58:48

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242592;
#else
constexpr int kTensorArenaSize = 241568;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[3] = { 21380, -24440, -31162, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00025462525081820786, 0.00022345890465658158, 0.00018738489598035812, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 53,-5,71,-25,-10,62,-43,-34,-68,-7,42,127,-10,-68,-26,-98,-43,83,54,70,-79,-39,-3,-48,-93,121,-27,29,84,12,-48,6, 
  /* [1][0][][] */ 47,-37,-44,-5,-30,109,2,-9,95,-21,-18,-127,-41,89,30,-61,83,-28,11,-68,-81,9,94,53,-2,1,17,5,-41,-31,-5,-6, 
  /* [2][0][][] */ -24,81,-66,77,81,-41,-15,127,104,70,126,-125,-88,-75,104,121,-80,-33,26,-97,101,117,-48,-74,77,-49,-2,-111,19,-63,-26,-6, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.004123347345739603, 0.0036186459474265575, 0.0030344710685312748, } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&g0::quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { 130, 695, -1416, -650, -653, 228, -1259, 209, -127, -1301, 358, 1509, -1309, -281, 245, 171, -236, -1345, -1423, -1517, -939, -1, 116, -153, -745, -178, -1359, -1047, -1643, -1326, -386, -1347, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 6.55510084470734e-05, 4.7013250878080726e-05, 5.4244392231339589e-05, 5.705746661988087e-05, 5.6769134971546009e-05, 5.0434224249329418e-05, 5.1349477871553972e-05, 5.1370265282457694e-05, 5.292126297717914e-05, 5.2798670367337763e-05, 5.0778799050021917e-05, 0.00010434572322992608, 5.2130388212390244e-05, 5.227619840297848e-05, 5.4709511459805071e-05, 6.5054293372668326e-05, 5.520364356925711e-05, 5.442836118163541e-05, 5.4340969654731452e-05, 5.2893832616973668e-05, 7.2676055424381047e-05, 6.6366206738166511e-05, 6.8465131334960461e-05, 4.9744321586331353e-05, 5.6972257880261168e-05, 8.0600817454978824e-05, 5.4314936278387904e-05, 5.957786925137043e-05, 4.971928137820214e-05, 5.2120241889497265e-05, 6.8768880737479776e-05, 5.3384781494969502e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -33,-61,82,20,52,-49,-75,-58,3,-62,-103,1,37,5,-32,43,-66,-43,-42,-31,-52,-66,-2,73,-75,6,44,-39,58,-13,-29,-67,53,-42,-61,46,-71,-48,-52,-5,19,-58,-46,73,39,-83,70,-5,-35,-36,-29,55,-46,-84,-61,71,-13,41,81,-127,-77,57,-64,27,-4,2,54,50,39,85,45,-73,70,-63,31,55,-89,6,-49,25,45,20,73,-17,-48,-48,-73,76,12,92,3,-68,28,42,0,14, 
  /* [1][0][][] */ -53,0,-71,-5,-11,84,41,36,80,-124,-70,110,73,-25,47,8,109,-61,21,98,-32,-5,14,14,-2,36,-44,78,31,0,93,-66,80,99,10,43,34,74,-20,-112,-63,-22,-39,-123,-84,23,-30,-90,-70,-71,108,20,23,127,-60,-49,42,81,37,94,-105,71,-104,-63,-41,29,88,57,106,-10,23,34,-125,96,-44,36,54,-41,-40,41,-63,52,-78,-122,24,59,-63,-94,102,10,29,26,63,65,50,-7, 
  /* [2][0][][] */ 4,-3,-83,40,-51,-73,35,43,-78,36,-62,57,37,-44,35,-121,-61,-46,0,10,-106,-43,55,-19,-48,30,55,-27,-87,33,31,44,-88,-49,-107,-120,-102,42,53,-53,-127,-94,-23,-40,-99,68,-51,-91,58,-4,40,-101,-71,21,-13,-21,-89,42,-84,-31,-43,12,-53,21,42,2,10,35,-104,20,-24,-91,-8,-91,-8,-11,-75,-47,-27,-26,-5,-108,-37,-63,-36,-100,-48,-58,36,59,-49,-30,-72,-90,-70,-86, 
  /* [3][0][][] */ 41,-7,25,-26,-66,4,-113,36,22,-3,40,-3,66,61,64,-25,38,46,-50,-6,82,-69,-74,-115,-83,-99,-90,69,3,-103,41,-14,-43,-42,-22,-9,-93,-28,14,-1,-44,-112,-85,-8,37,-20,-57,-101,5,-60,18,-57,52,9,41,-92,-112,-108,-127,-44,-112,8,-70,30,24,-52,-43,-41,-29,-63,-15,72,-2,-95,30,-76,-13,31,67,-58,-75,-100,8,31,-8,-14,-70,-108,-71,3,-29,-91,66,-85,-80,16, 
  /* [4][0][][] */ 24,89,-25,17,-32,-15,-5,-8,56,31,-2,-4,10,-45,-7,-77,-6,5,-85,7,90,-96,75,-1,-85,-29,51,-33,-63,6,-61,-43,32,79,-3,-99,-72,-29,-123,26,-64,-83,-109,-79,13,74,9,-10,-28,-45,0,-119,-91,44,-113,-8,-25,-82,-32,20,-27,-84,-56,-75,-21,41,-3,-38,20,-112,-88,-63,-81,-15,51,-23,56,-59,13,-86,-15,-63,-127,-75,-45,50,49,-38,-92,-124,4,8,-20,40,-58,-50, 
  /* [5][0][][] */ 73,-51,86,89,32,-127,15,60,60,-94,-10,-55,28,73,36,42,26,51,-68,92,23,52,18,-5,-78,-54,-11,-63,21,20,8,-87,-29,4,-55,10,-90,-39,45,27,-114,-42,67,109,-15,23,27,-41,-65,69,23,29,45,-82,29,-16,58,57,-37,-74,-2,-41,10,-61,-14,92,-12,13,70,30,83,-51,-24,52,-17,-57,13,-44,-1,77,109,28,38,77,-82,37,-13,31,47,-69,112,99,6,13,57,-80, 
  /* [6][0][][] */ -11,-62,66,36,-97,-68,-29,28,-36,-93,-22,-101,44,19,70,-125,12,-22,-25,58,-90,-127,63,21,-75,-94,-32,-79,-49,-119,14,-89,-106,-126,-65,-115,-36,5,-117,43,44,21,-8,-41,-119,64,-100,-63,-67,-13,-46,-71,23,-70,54,-48,-22,-32,-84,64,-104,-24,32,-85,-67,31,58,-68,39,-33,-117,-30,19,-85,-102,-61,-90,-110,-74,-52,1,-49,11,-45,-91,-97,-61,-105,42,54,53,-13,-70,-80,39,-50, 
  /* [7][0][][] */ 68,50,-26,-24,-41,48,-27,27,73,-37,-62,40,65,-98,59,23,-4,-19,-20,111,44,33,-5,92,-80,98,13,51,-63,65,-40,-3,53,12,75,108,-80,93,-22,-82,70,-97,94,52,-19,-68,87,-124,-26,-57,-100,-87,-13,111,-27,-5,114,-83,-6,-32,-81,-36,-7,-98,-54,-56,71,19,-95,5,71,93,83,48,51,21,-77,52,-79,38,91,-75,-28,-127,64,-50,-100,52,93,-50,30,67,-62,-73,12,-44, 
  /* [8][0][][] */ -6,34,-24,-54,53,-9,-81,2,-38,10,37,93,14,-61,-55,-78,-86,63,-94,22,18,-14,60,110,-122,75,24,69,-66,-13,-95,84,96,-35,46,14,111,6,-31,44,23,46,-49,-79,-3,-44,-33,62,30,-87,-63,-35,-47,-15,-40,-95,35,92,-72,70,51,36,-21,80,-23,-37,-8,68,-68,74,26,12,72,62,3,-1,-43,103,52,54,45,53,-91,-127,2,-22,51,-51,32,-51,-86,102,-52,-94,-34,44, 
  /* [9][0][][] */ -36,-47,64,6,74,-125,-47,-103,24,6,22,31,-53,-95,-117,-53,-22,-41,-127,-84,-35,54,-120,-105,53,-30,-36,-10,-31,-88,-86,38,30,-37,-9,-18,-81,3,-55,-71,36,-76,8,-114,26,-14,-107,12,65,-23,-58,-37,40,-113,-96,49,90,-88,-43,11,-107,50,43,-78,-82,-36,64,4,-67,43,60,-101,-28,59,-119,-104,-92,-113,-66,50,-4,-1,53,34,-70,-109,9,-36,86,-1,-62,55,62,-11,23,-50, 
  /* [10][0][][] */ -76,63,89,-40,5,47,81,50,8,-13,39,-35,105,52,-7,-23,-69,40,-121,-35,-15,25,52,-38,8,58,-122,-86,-40,39,-100,-96,104,82,121,83,-13,21,-41,-24,-43,68,-70,-30,-127,-91,-1,-81,-76,-8,20,-30,62,51,-96,-45,-74,-18,34,-27,-84,47,18,34,104,-68,-71,-16,19,-10,-63,-35,87,78,-69,68,-31,68,65,18,82,-39,39,43,-90,-6,91,-41,54,-46,-41,-42,-59,-83,-23,-46, 
  /* [11][0][][] */ 59,25,11,52,43,49,19,49,114,59,-16,54,-19,32,28,42,14,-32,72,40,48,52,32,-49,23,-42,33,2,74,60,44,14,-57,-33,14,36,2,76,55,-57,-15,112,-32,-12,-6,62,-28,44,53,84,121,46,-8,-69,49,30,-10,-47,15,-45,42,25,75,22,53,21,30,41,56,26,-16,-32,1,79,16,54,25,27,45,103,-42,71,40,-7,69,87,-1,100,2,127,65,-65,-19,33,-4,46, 
  /* [12][0][][] */ -20,29,-77,-32,41,-7,-60,2,-73,16,-41,-20,-69,-19,10,-90,-95,-49,-66,-96,-7,-35,-9,47,-76,-73,58,-108,45,-17,-59,67,-104,-88,-69,-21,-27,-90,-40,7,73,19,-124,-62,-43,-93,-58,73,-63,-127,-92,110,1,-21,-97,39,-44,-80,22,28,21,63,-27,15,65,-3,-65,66,18,52,4,29,39,69,-41,-34,-48,5,-122,-102,-79,56,11,-4,-56,12,19,70,-105,-116,51,2,49,-31,-6,32, 
  /* [13][0][][] */ 66,-26,101,89,58,62,54,53,32,-92,-22,-20,75,29,40,-28,-125,-57,-98,28,38,-27,96,-24,-51,20,6,26,-122,-87,33,20,30,71,-21,11,-63,-38,17,74,-96,69,-17,35,-16,18,-8,-22,59,52,-51,-90,-77,-58,74,-67,-79,35,-14,-108,-32,116,-87,4,-45,-49,-98,41,-46,17,71,-5,-64,14,-61,-31,-81,51,48,-43,54,-92,92,17,-82,-127,66,102,-31,-24,-45,63,103,-45,39,-13, 
  /* [14][0][][] */ -61,-83,81,78,73,-68,-27,-66,-89,-56,66,83,-8,-84,-49,-83,-75,-71,-7,34,-34,32,-3,67,-107,-48,-31,29,-87,-111,-75,14,107,-23,-11,24,94,104,20,-125,-30,-119,63,79,53,-101,46,-83,50,24,54,9,85,2,-15,4,-30,7,49,73,-70,-71,-95,54,-65,-10,76,-84,-66,-42,-58,91,17,80,39,-72,40,-63,39,27,54,-34,-81,-86,-101,-127,-89,71,100,-15,54,-23,73,71,-4,52, 
  /* [15][0][][] */ -12,-42,-14,43,81,-81,41,-37,46,-38,-24,34,82,-10,-45,-127,40,-25,-93,9,30,17,29,74,24,58,-4,46,22,5,30,-102,28,-4,-36,16,-46,89,43,-102,18,47,-44,-43,-21,-80,-26,-84,-38,-60,-9,-3,-65,-25,-80,-28,66,2,-47,98,-87,-81,-66,68,-18,43,-32,7,-47,-22,39,-31,1,8,24,-94,-23,40,64,43,-55,18,-99,-85,-94,-71,-68,10,75,-2,-120,-24,18,53,-50,79, 
  /* [16][0][][] */ -74,20,95,-37,12,59,-51,28,18,40,-114,49,-9,-62,-61,-36,58,65,33,54,71,53,-29,52,-11,25,-54,60,-127,-9,3,3,-88,49,40,29,-23,30,-36,-35,-15,-27,81,94,67,79,76,-5,-13,-107,-6,104,-26,6,46,36,-11,84,58,-30,75,103,15,44,44,15,-54,40,18,104,-31,-10,34,59,52,71,-4,70,-98,-4,22,-72,58,9,-3,44,70,10,43,32,5,105,65,-26,-87,11, 
  /* [17][0][][] */ 7,-57,-8,32,-69,-94,-85,-103,36,-98,36,6,47,24,-117,12,14,56,58,60,-100,-33,-19,-75,-13,24,-87,-14,55,-66,-54,35,-57,-46,-4,-28,-70,51,-95,-50,-90,-55,-46,-41,-17,-9,46,-113,108,57,-39,61,-46,49,52,-87,-122,38,-98,-80,-3,-107,42,48,-97,-90,9,-108,-113,-35,58,-8,-18,-119,-80,21,63,-64,3,-78,-24,-36,-88,-98,-112,108,33,-61,-15,34,-100,-127,-44,53,-19,-17, 
  /* [18][0][][] */ -102,52,97,-85,-41,-119,-112,-21,-18,30,-118,-9,-57,3,17,-70,-10,-44,58,-42,50,-60,-6,-92,38,-108,-37,58,-8,-5,3,2,3,-51,-111,-117,-48,53,-49,24,-65,24,-57,-34,-109,44,36,21,-11,-46,62,46,-118,-18,20,44,-53,-1,-40,-127,35,55,-14,5,-77,-127,-48,42,23,-33,-85,53,-101,-24,-94,-91,11,67,-26,-72,-77,-41,-1,-51,59,7,27,40,-56,-44,-22,51,35,-18,7,0, 
  /* [19][0][][] */ -15,-5,27,-2,13,-89,44,46,84,-80,-10,-42,-110,-6,-71,20,36,-107,65,16,-43,34,-77,-23,30,-96,0,-88,-106,-119,-83,11,33,-99,-6,-35,-24,-88,-72,-106,6,-127,-99,-23,-97,1,33,-101,-46,-3,-58,11,-60,-22,-22,-42,-12,50,-34,-56,18,-77,59,18,-85,-31,-47,-33,-34,12,28,-72,-82,-126,-75,-97,-51,-119,-16,55,14,-125,-49,34,-103,-28,-27,-32,39,-2,-29,18,-60,73,28,-71, 
  /* [20][0][][] */ -15,42,17,30,-27,67,37,20,38,-6,-15,-8,-20,31,25,-67,-19,-24,-42,-37,11,-30,-68,-55,16,-51,-78,20,-2,-16,5,51,47,10,-28,38,7,-29,-35,-79,4,-39,-78,-85,-41,-38,-59,39,19,-64,-63,12,5,127,9,-26,82,21,34,114,48,-57,-51,-39,-30,-57,-35,6,-56,-72,-60,32,-60,-58,-6,-10,73,27,48,43,27,-3,29,2,11,44,-32,26,4,34,-10,12,3,13,-12,-20, 
  /* [21][0][][] */ 24,38,40,-61,73,-86,38,27,-24,-81,-36,41,11,-8,-34,-88,-107,-41,-21,-1,60,-44,44,-41,19,-50,-47,52,-1,-31,-30,-43,24,-1,-52,-59,90,72,-92,-65,-16,-23,37,-12,-105,-88,-60,36,-29,-67,-14,32,28,58,-90,-15,-29,24,-28,83,-20,-82,-55,-14,50,8,-24,-53,-87,0,43,62,28,3,41,19,-84,1,39,65,16,25,15,-100,1,-127,40,-74,-53,17,33,-68,-52,-78,49,-18, 
  /* [22][0][][] */ 20,-10,-32,-49,53,-62,61,36,-75,60,-52,-69,75,-77,-61,-43,10,56,-95,-37,62,-37,21,29,66,-9,-72,71,-45,-50,-42,-68,30,42,11,10,1,-23,-40,-67,-41,0,21,78,51,-70,40,-18,-13,-45,1,-10,-36,-127,-36,26,-26,-9,-11,-42,57,-33,-51,-75,-34,20,-64,-33,81,84,-18,1,-36,-16,42,-46,35,-44,30,58,77,-52,-51,-72,41,38,57,-15,-51,20,-39,53,32,18,-21,52, 
  /* [23][0][][] */ 36,-61,26,56,72,-127,-4,-75,23,-63,49,77,18,-104,16,-22,44,-35,-90,88,75,-68,89,-16,-15,-25,72,25,21,36,48,-38,-41,35,14,18,89,-7,-85,31,-94,12,29,-71,-39,-102,93,26,100,-110,-74,-55,74,-108,-47,78,-112,-4,86,32,-106,-56,-63,-16,28,30,-85,-114,53,11,86,-62,5,-36,-26,-85,39,-31,67,115,-35,-42,30,-76,66,-37,85,-9,-90,60,105,11,112,-62,-49,65, 
  /* [24][0][][] */ -101,-62,-87,-61,-68,-123,-71,-82,26,54,48,22,73,10,-52,-127,-113,-2,-15,-49,54,-99,-58,-25,4,-43,23,42,50,2,-18,-82,-5,-21,21,18,-52,-84,11,-46,-102,-113,90,-9,-18,-63,7,9,-91,-68,-31,-40,43,-10,34,-88,-17,42,5,-17,36,-34,-16,57,-91,49,-62,-102,-109,27,-62,-30,-46,7,50,47,23,-76,-93,-74,-64,-105,-76,-110,-30,-11,-29,-123,11,-122,-41,-61,-32,-13,-76,4, 
  /* [25][0][][] */ -24,-22,-48,-7,33,-24,-61,4,14,-41,-39,1,36,9,-47,15,-33,31,127,-70,36,55,-15,-43,32,-32,-62,18,49,-23,30,87,39,-50,17,33,39,-50,-11,-22,-30,78,-62,-3,65,66,27,27,-52,60,-42,22,8,-13,2,14,-16,27,-62,26,56,28,82,14,-12,48,-16,5,-34,-4,-20,-73,16,-86,34,24,42,25,-2,6,18,49,-16,89,-34,33,-64,-55,-32,-6,75,6,-49,9,-23,-53, 
  /* [26][0][][] */ 11,-120,-47,-42,-109,-52,-44,-33,-127,-121,57,37,-87,-66,-16,-40,41,-20,-88,-81,-14,33,48,-20,4,23,-19,6,-18,-20,-103,-35,-64,-80,-103,-107,-77,39,-66,46,-107,43,13,2,-102,21,-56,53,-49,0,-28,47,-22,-65,-35,-120,41,24,-3,-6,-28,-112,19,-50,63,-50,-68,14,-95,35,39,51,34,-104,-94,-29,-8,-115,-100,-17,-52,26,40,-96,28,-38,-77,-12,-93,64,-22,-18,-72,63,15,34, 
  /* [27][0][][] */ -14,60,-68,-99,-113,-63,-79,-34,80,47,5,-98,-43,20,37,-36,58,-2,26,-66,-81,-13,-42,-32,-28,9,-91,-15,26,0,-47,-24,17,26,-87,-83,-43,-67,-102,40,-94,46,11,-17,43,35,28,127,109,26,99,-15,-89,-82,-15,-47,68,-42,-65,-58,-2,-75,-13,15,9,-59,-100,54,16,20,-103,-19,20,-5,-28,-86,68,-23,43,81,36,-41,66,-32,-73,-9,-45,30,-56,31,-43,-65,13,66,36,38, 
  /* [28][0][][] */ 39,22,47,1,-78,-33,-119,-93,-15,-75,75,32,-105,-105,26,54,44,121,-102,38,-11,79,-118,-87,-114,33,-111,-25,-102,-40,-41,9,-25,-14,51,74,44,-123,-66,50,111,9,-111,16,-80,-47,-14,10,38,-94,-58,-39,-101,81,5,0,65,-41,41,63,15,-15,-60,-25,13,87,-56,32,-43,-13,-127,-16,34,3,-34,-123,-81,-28,-44,11,-98,-122,66,-13,19,-36,18,-99,-114,-89,-63,-96,-74,7,-83,-90, 
  /* [29][0][][] */ 24,17,16,-71,-103,10,-127,-26,121,-38,-104,-109,61,-105,-63,-67,-77,71,-1,-83,-83,-53,19,-25,-53,-21,-57,-47,-108,-30,58,-21,12,-20,-91,-77,-41,51,-37,56,6,59,-67,38,-6,77,-72,-48,-4,-32,21,-106,28,-103,68,22,-115,21,-70,60,-114,62,-93,-71,-76,-69,16,45,56,-96,11,-89,63,29,19,-8,102,-75,-52,-5,-35,-86,-32,-100,30,95,20,34,-63,52,33,38,-115,-8,-28,18, 
  /* [30][0][][] */ 14,-82,-36,20,-81,49,-57,-8,93,-34,17,30,-81,97,56,-16,54,-1,17,-89,6,9,-96,-17,-97,-22,-37,63,0,-80,-80,107,-77,-51,-92,-36,3,-47,-27,-8,63,-68,-35,43,49,58,78,19,11,53,-22,-73,35,-85,-22,63,-70,-54,-19,-24,-82,-11,-54,-23,-63,-64,-112,83,-25,45,11,-56,-68,64,23,-60,69,-9,-74,-2,1,127,-62,-43,6,15,-82,71,-40,-73,44,17,-46,-36,-8,-14, 
  /* [31][0][][] */ 42,-99,-3,48,11,27,-76,-104,-42,-42,-94,-90,54,-121,-65,64,-72,-92,9,7,20,6,-58,53,5,-119,8,1,-84,-85,12,60,-16,-8,-99,-36,47,-54,-78,-114,15,-79,-41,-6,-13,-67,-55,-5,85,-3,47,-44,-126,-69,-97,-2,-117,28,-31,63,-55,-29,48,-83,32,62,-59,-86,33,-113,-127,-22,-107,-62,-24,-26,-77,-38,10,40,-94,-59,17,42,22,56,-109,-18,-16,-71,-93,-76,-22,71,-37,-54, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0027859178371727467, 0.0019980631768703461, 0.0023053865879774094, 0.0024249423295259476, 0.0024126882199198008, 0.0021434545051306486, 0.0021823528222739697, 0.0021832361817359924, 0.0022491535637527704, 0.0022439435124397278, 0.0021580988541245461, 0.0044346931390464306, 0.0022155414335429668, 0.0022217384539544582, 0.0023251541424542665, 0.0027648075483739376, 0.0023461547680199146, 0.00231320527382195, 0.0023094911593943834, 0.0022479877807199955, 0.0030887322500348091, 0.0028205637354403734, 0.0029097679071128368, 0.0021141336765140295, 0.0024213208816945553, 0.0034255345817655325, 0.0023083847481757402, 0.0025320593267679214, 0.0021130694076418877, 0.0022151102311909199, 0.0029226774349808693, 0.0022688531316816807, } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&g0::quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { 920, -413, 2154, 5366, 5727, -2750, 4143, -2940, -2274, -1338, 5055, -3415, 5580, 4988, 952, 4410, -768, -479, -1693, 4797, 1748, -791, 1680, -718, -1096, 2895, 1765, 1328, 5278, 2777, 2668, 834, 1944, 5233, 5042, 2245, -888, 3374, 2965, -2898, -253, 1354, 75, 1553, -1517, 699, -1081, 900, -9258, 1487, 886, -3630, 7718, -724, 2111, 1167, 1132, 2817, -1734, -1826, 268, 1102, 879, 2877, 5790, 3561, 4288, 4753, 4179, -891, 2901, 5659, 3042, -2112, 5993, 5877, 556, -5038, 339, 1107, 9579, 2715, -1338, -1775, 1255, 749, 2043, -2573, 3823, -1241, 7007, 1084, -245, -3624, -958, 1151, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00010143565305043012, 0.00021292525343596935, 0.00023126938322093338, 0.00012371057528071105, 0.00010604080307530239, 0.00014516041846945882, 0.00013803361798636615, 0.00011815908510470763, 0.00021823914721608162, 0.00020528738969005644, 0.0001162109401775524, 0.00013366922212298959, 9.2592286819126457e-05, 0.00010998057405231521, 0.00025930904666893184, 0.0001358332228846848, 0.00019453382992651314, 0.00026344315847381949, 0.00014155011740513146, 0.00011787775292759761, 0.00022086846001911908, 0.00015598097525071353, 0.00017112940258812159, 0.00011973163054790348, 0.0002224067720817402, 0.00020380341447889805, 0.00010076195030706003, 0.00022675559739582241, 0.00013585630222223699, 0.00014590713544748724, 0.00016926199896261096, 0.00019757173140533268, 0.0001506822882220149, 0.00011325992090860382, 0.00012095170677639544, 0.0002117337571689859, 0.00016582281386945397, 0.00013221219705883414, 0.00010127144923899323, 0.0001584035053383559, 0.00018263868696521968, 0.00015802898269612342, 0.00019152557069901377, 0.0001784746564226225, 0.00016003381460905075, 0.00016407313523814082, 0.00023371951829176396, 0.00010033667786046863, 8.6051411926746368e-05, 0.00014865252887830138, 0.00022435066057369113, 0.00014409552386496216, 8.6967316747177392e-05, 0.00028336001560091972, 0.00014109074254520237, 0.00017730187391862273, 0.00018430186901241541, 0.00011063731653848663, 0.00013902713544666767, 0.00015305943088606, 0.00020525896979961544, 0.00015192266437225044, 0.00016743880405556411, 0.00018047832418233156, 9.8502576292958111e-05, 0.00011280977196292952, 8.1856531323865056e-05, 0.00012604985386133194, 0.00015941742458380759, 0.0002160876028938219, 0.00014504024875350296, 0.00012015970423817635, 0.00013837627193424851, 0.00011883931438205764, 0.00010918331099674106, 0.00012432328367140144, 0.0001689494529273361, 0.0001282802113564685, 0.00015262735541909933, 0.00016777498240116984, 8.4527804574463516e-05, 0.00011292855924693868, 0.00012813860666938126, 0.0002037100784946233, 0.00015415027155540884, 0.00020567870524246246, 0.00012892793165519834, 0.00014854891924187541, 0.00015940731100272387, 0.00011327306128805503, 8.3334693044889718e-05, 0.00014038832159712911, 0.00019972259178757668, 0.00011962230200879276, 0.00017131291679106653, 0.00018125219503417611, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ 8,120,-103,24,79,-14,89,83,-45,9,61,-64,97,127,-101,11, 
  /* [1][0][][] */ -29,21,-92,-80,8,90,46,-127,70,-30,9,-73,-14,-86,-69,5, 
  /* [2][0][][] */ -36,-33,32,50,17,27,-123,127,-8,7,69,-35,-39,-60,-54,66, 
  /* [3][0][][] */ 127,-66,50,-18,33,-20,-48,113,-19,58,104,78,35,57,8,3, 
  /* [4][0][][] */ -58,-37,7,39,-104,7,-50,-93,-5,-12,34,7,2,54,97,127, 
  /* [5][0][][] */ 92,31,-41,-31,-51,11,36,87,25,-4,74,103,127,5,-75,-1, 
  /* [6][0][][] */ 20,-29,-54,-44,-52,49,16,-47,-64,-14,-32,4,75,41,127,9, 
  /* [7][0][][] */ -34,69,-72,-108,29,-66,-87,-7,-101,45,-92,-63,-127,-60,-13,76, 
  /* [8][0][][] */ 64,47,61,3,51,27,71,-2,89,-10,36,-10,-127,-32,-76,-6, 
  /* [9][0][][] */ -12,103,11,-51,-11,-18,36,-43,-30,80,-83,31,115,127,36,13, 
  /* [10][0][][] */ 32,17,-33,40,-71,-19,62,-22,-56,-56,-50,-98,-127,-62,4,103, 
  /* [11][0][][] */ 29,-4,111,30,-31,-8,-1,123,-112,73,-89,-50,-55,-31,119,127, 
  /* [12][0][][] */ -109,-59,44,2,-14,2,127,66,-59,43,6,-44,-62,80,-26,124, 
  /* [13][0][][] */ -1,-3,23,127,36,52,122,80,42,10,-53,-81,31,86,-62,-9, 
  /* [14][0][][] */ -77,127,-23,-20,29,17,76,-14,3,20,107,6,-33,10,-45,25, 
  /* [15][0][][] */ -24,-8,-127,-38,79,-67,-115,-48,-44,-4,-43,-90,-14,-126,-60,46, 
  /* [16][0][][] */ 106,21,-11,-48,22,-27,62,-7,-73,25,127,48,48,29,-38,6, 
  /* [17][0][][] */ 4,18,-45,-115,-35,-81,88,-127,9,-39,-20,23,23,88,-8,27, 
  /* [18][0][][] */ 35,127,-15,-56,73,-60,-7,-62,-41,106,-28,28,-16,84,-22,-42, 
  /* [19][0][][] */ -80,-127,102,-83,29,-106,9,-21,32,56,72,93,-5,-10,45,-11, 
  /* [20][0][][] */ -22,91,48,-1,7,-1,-4,-11,52,5,114,6,-127,-20,-97,-3, 
  /* [21][0][][] */ -78,65,23,40,117,46,127,52,-121,56,-86,16,5,34,-96,-56, 
  /* [22][0][][] */ -4,-91,43,0,2,-127,67,-4,30,-39,-37,-48,15,-70,-49,-38, 
  /* [23][0][][] */ -98,-127,82,50,18,-14,9,-32,5,-7,72,-13,-34,75,89,112, 
  /* [24][0][][] */ 11,15,20,77,78,24,-49,-127,61,12,-41,15,9,4,-25,-45, 
  /* [25][0][][] */ -38,10,40,-37,-46,9,14,-24,-42,78,-40,-21,7,127,36,14, 
  /* [26][0][][] */ -62,106,8,-19,69,-99,-10,-45,41,35,8,117,27,-23,-127,121, 
  /* [27][0][][] */ -30,-127,-38,7,-63,77,0,-57,18,-29,61,-32,12,-38,-84,-7, 
  /* [28][0][][] */ -7,32,14,81,71,8,-54,-127,-88,55,90,-25,113,-6,-40,-56, 
  /* [29][0][][] */ -125,103,-24,-19,-9,14,-127,-47,-21,-13,6,-12,3,-97,-75,38, 
  /* [30][0][][] */ 82,89,-48,60,-70,-44,-54,-36,-40,15,-37,-114,127,35,-4,42, 
  /* [31][0][][] */ 127,37,-83,-33,-42,23,73,9,-30,-15,30,37,54,3,-18,14, 
  /* [32][0][][] */ -62,-35,127,-8,-32,73,58,4,-12,17,-26,-22,-32,33,77,23, 
  /* [33][0][][] */ -19,11,-78,-58,-44,7,82,34,-3,-9,68,-62,52,127,-45,45, 
  /* [34][0][][] */ -116,-34,97,25,1,-53,89,-1,-127,64,35,-65,12,23,-33,-19, 
  /* [35][0][][] */ -13,7,-30,-2,-62,82,-54,-9,-34,127,-7,71,-85,34,12,25, 
  /* [36][0][][] */ -19,-73,127,-33,-63,17,-38,-33,2,10,-61,68,-17,-74,-21,37, 
  /* [37][0][][] */ 54,-12,81,-13,85,-36,-31,-8,-77,126,-53,-18,-103,-36,127,-14, 
  /* [38][0][][] */ 68,62,-4,-98,42,-33,-87,25,-54,35,-82,-68,-43,-127,-79,25, 
  /* [39][0][][] */ -103,10,-40,-25,-97,-90,44,31,-127,-45,24,95,23,5,2,43, 
  /* [40][0][][] */ 89,7,49,-77,-77,46,48,-4,-43,-19,-75,-127,-7,45,63,37, 
  /* [41][0][][] */ 97,-76,-71,-45,14,-8,-91,-3,64,-12,-29,-63,127,-78,60,-62, 
  /* [42][0][][] */ -40,-110,-47,126,-11,-127,-118,30,-14,0,24,53,-83,97,-62,39, 
  /* [43][0][][] */ -104,-54,-47,-108,-45,-12,-22,96,35,-127,-26,59,-14,-35,-51,87, 
  /* [44][0][][] */ -52,52,27,-38,-26,-17,-6,127,89,-67,95,97,103,52,5,-28, 
  /* [45][0][][] */ 52,65,-56,81,127,-59,-10,-29,92,-75,29,-43,-21,32,-64,38, 
  /* [46][0][][] */ -31,-40,1,-9,94,-32,0,39,-2,127,-17,-88,31,58,-57,77, 
  /* [47][0][][] */ 97,-41,-45,-14,73,-23,-46,-72,30,127,-37,37,-15,-126,-88,4, 
  /* [48][0][][] */ 22,41,-9,-127,18,-57,107,-121,20,6,-8,80,100,102,14,79, 
  /* [49][0][][] */ 16,127,-74,51,71,-14,57,48,-16,13,-7,-48,24,68,80,-115, 
  /* [50][0][][] */ 16,53,-17,10,-127,25,-73,-51,73,85,34,17,-29,-38,-1,21, 
  /* [51][0][][] */ 127,-40,-63,-26,-18,101,-113,-42,57,13,-43,72,-34,-73,0,25, 
  /* [52][0][][] */ 5,-42,51,98,-72,-84,-127,-51,-46,-38,-109,-115,18,-97,37,54, 
  /* [53][0][][] */ 10,82,33,-127,-27,113,125,-13,-31,-13,0,-50,40,-73,18,64, 
  /* [54][0][][] */ 40,127,-27,-28,11,-44,-70,36,-1,-9,-38,103,59,75,5,28, 
  /* [55][0][][] */ -22,1,62,39,48,-11,95,82,-69,-11,-17,5,127,33,-8,-13, 
  /* [56][0][][] */ 127,2,42,42,-76,119,-68,-101,-36,69,-122,-33,-98,116,17,49, 
  /* [57][0][][] */ -53,-54,-63,-49,-111,-106,68,-19,-127,-59,86,95,10,83,-40,46, 
  /* [58][0][][] */ 95,-33,48,6,38,-107,-47,10,65,-18,-127,-36,57,-63,-54,43, 
  /* [59][0][][] */ 46,1,-92,89,1,64,86,-1,-60,-22,13,-127,-127,-57,42,101, 
  /* [60][0][][] */ -21,17,-1,24,-33,-42,-19,-4,-20,-88,78,114,-71,-127,-37,-1, 
  /* [61][0][][] */ -37,6,94,-89,-52,47,-26,127,-1,-95,60,113,98,-3,-9,108, 
  /* [62][0][][] */ 29,7,-2,-127,-15,-3,16,-47,6,43,-44,42,3,-38,-72,-63, 
  /* [63][0][][] */ 13,-16,-1,-3,-27,-36,-93,8,-59,14,-38,-3,127,-11,56,-37, 
  /* [64][0][][] */ 54,11,-7,13,-68,-28,0,-89,87,127,-5,14,50,-83,-57,66, 
  /* [65][0][][] */ -17,19,-30,-5,-64,81,6,-22,54,-106,104,-49,76,72,-127,47, 
  /* [66][0][][] */ -99,127,-126,-110,93,-27,-105,-104,-82,95,112,-13,-94,-82,72,42, 
  /* [67][0][][] */ 17,-16,-127,-109,84,73,-4,-26,-13,-2,39,2,36,31,-12,18, 
  /* [68][0][][] */ 72,33,-18,-73,-41,55,-8,48,-80,78,93,6,2,-53,-127,-27, 
  /* [69][0][][] */ 54,-89,34,-54,24,-101,-36,127,-8,67,89,85,-25,63,-27,8, 
  /* [70][0][][] */ 15,-19,127,47,92,-38,93,38,50,0,-72,85,-91,84,-110,76, 
  /* [71][0][][] */ -8,26,102,-65,-127,-59,27,-8,-34,10,6,-118,-100,-8,25,33, 
  /* [72][0][][] */ -78,-112,43,-109,65,16,8,39,-65,52,-127,-28,33,103,-37,99, 
  /* [73][0][][] */ -1,-4,70,2,101,-107,-69,3,-52,109,-110,25,-110,-55,127,-8, 
  /* [74][0][][] */ -110,12,-127,-58,59,-35,-71,27,-76,48,-111,-36,-56,-66,-24,45, 
  /* [75][0][][] */ 94,-6,33,-34,35,15,-127,-37,-10,-39,39,5,-1,-30,1,-33, 
  /* [76][0][][] */ 25,0,-42,64,67,127,102,-21,24,-60,91,111,60,-50,-27,16, 
  /* [77][0][][] */ -50,-47,117,-21,31,-52,-70,-127,12,54,19,111,40,28,-17,-17, 
  /* [78][0][][] */ -57,7,2,-39,-24,-64,30,-35,22,7,11,-110,-127,-80,-126,-51, 
  /* [79][0][][] */ -127,-85,-17,44,96,52,-36,26,-11,49,-17,29,-83,-91,-20,-10, 
  /* [80][0][][] */ -29,-127,2,84,-52,-36,-97,75,-20,7,101,26,-112,21,-47,87, 
  /* [81][0][][] */ 127,71,-39,99,-11,19,29,120,7,28,122,52,124,37,72,-29, 
  /* [82][0][][] */ -24,25,-18,-63,57,-88,-127,-101,29,67,-57,-55,-8,85,-81,-64, 
  /* [83][0][][] */ 106,-31,71,-14,-74,-3,-103,1,12,-127,8,-63,-17,4,14,4, 
  /* [84][0][][] */ 12,-29,-126,50,127,30,49,43,-110,21,-89,-29,58,-61,-98,-44, 
  /* [85][0][][] */ 0,64,32,-2,7,-35,60,-53,127,-18,-8,-56,30,-100,22,-11, 
  /* [86][0][][] */ 117,-57,127,46,-12,-80,79,65,-73,-93,-80,-18,30,34,-99,47, 
  /* [87][0][][] */ -3,12,18,-44,88,-35,-58,27,80,-35,69,-43,-62,-127,1,15, 
  /* [88][0][][] */ -58,-33,39,8,14,46,-53,-53,-13,31,-57,-127,-58,-23,-7,-11, 
  /* [89][0][][] */ -68,31,27,-96,47,24,-127,6,112,14,-95,-30,-9,-106,-49,-43, 
  /* [90][0][][] */ -14,-11,-76,-127,124,32,-85,47,41,102,38,-5,10,7,-61,-56, 
  /* [91][0][][] */ -52,-74,16,13,-31,-32,-38,67,-21,-84,37,21,-8,72,-38,127, 
  /* [92][0][][] */ -24,89,-5,-27,-16,39,-127,66,6,-11,83,30,-49,122,26,22, 
  /* [93][0][][] */ 4,87,-62,-79,81,81,-107,-10,76,44,67,64,-127,13,-42,63, 
  /* [94][0][][] */ 66,127,102,-13,-120,-51,-2,-48,44,-46,9,0,-28,-71,6,-67, 
  /* [95][0][][] */ -27,26,18,9,119,-20,-127,96,28,27,-43,103,-30,10,116,-33, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0010208853054791689, 0.0021429571788758039, 0.0023275790736079216, 0.0012450682697817683, 0.0010672331554815173, 0.0014609472127631307, 0.001389220473356545, 0.0011891960166394711, 0.0021964381448924541, 0.0020660869777202606, 0.001169589115306735, 0.0013452955754473805, 0.00093188241589814425, 0.001106884446926415, 0.0026097805239260197, 0.001367074903100729, 0.0019578591454774141, 0.0026513875927776098, 0.0014246118953451514, 0.0011863645631819963, 0.0022229005116969347, 0.0015698492061346769, 0.0017223084578290582, 0.0012050226796418428, 0.0022383825853466988, 0.0020511515904217958, 0.0010141049278900027, 0.0022821507882326841, 0.0013673071516677737, 0.0014684625202789903, 0.001703514251857996, 0.0019884337671101093, 0.0015165213262662292, 0.0011398890055716038, 0.0012173019349575043, 0.002130965469405055, 0.0016689010662958026, 0.0013306315522640944, 0.0010192326735705137, 0.0015942305326461792, 0.0018381421687081456, 0.0015904611209407449, 0.0019275830127298832, 0.0017962338170036674, 0.0016106384573504329, 0.001651291735470295, 0.0023522381670773029, 0.0010098248021677136, 0.00086605269461870193, 0.0014960931148380041, 0.0022579466458410025, 0.0014502296689897776, 0.00087527069263160229, 0.0028518382459878922, 0.0014199885772541165, 0.0017844305839389563, 0.0018548809457570314, 0.0011134941596537828, 0.0013992196181789041, 0.0015404457226395607, 0.00206580082885921, 0.0015290048904716969, 0.0016851649852469563, 0.0018163995118811727, 0.0009913657559081912, 0.0011353585869073868, 0.00082383392145857215, 0.0012686115223914385, 0.0016044349176809192, 0.0021747841965407133, 0.0014597377739846706, 0.001209330977872014, 0.0013926691608503461, 0.0011960420524701476, 0.0010988605208694935, 0.0012512347893789411, 0.0017003687098622322, 0.0012910586083307862, 0.0015360971447080374, 0.0016885484801605344, 0.00085071852663531899, 0.0011365540558472276, 0.0012896334519609809, 0.0020502123516052961, 0.0015514243859797716, 0.0020700253080576658, 0.0012975775171071291, 0.0014950503828004003, 0.0016043330542743206, 0.0011400212533771992, 0.00083871063543483615, 0.0014129191404208541, 0.0020100807305425406, 0.0012039223220199347, 0.0017241555033251643, 0.0018241880461573601, } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { -5165, -1302, 8686, 668, 919, 5785, 7445, 8194, 11113, -8708, -8509, 116, -21730, 20513, 4833, 17805, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 5.2550123655237257e-05, 5.7432040193816647e-05, 3.5901772207580507e-05, 7.3042501753661782e-05, 4.15338363382034e-05, 6.4727624703664333e-05, 6.4706524426583201e-05, 6.4909436332527548e-05, 6.6490661993157119e-05, 4.4182317651575431e-05, 5.3259864216670394e-05, 8.9890854724217206e-05, 5.0795617426047102e-05, 4.8473539209226146e-05, 7.7616139606107026e-05, 6.083692642278038e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -55,56,32,-26,-32,-2,-48,9,-57,41,-19,-32,59,42,25,-31,6,-12,43,22,10,-59,78,43,65,37,1,23,-32,-83,-36,13,-27,-28,19,32,-7,51,-12,2,-17,11,-66,6,-60,-22,18,62,4,36,-32,-7,4,29,39,-31,-89,56,24,127,68,67,-24,-7,1,-19,-22,37,-58,-53,37,-11,8,-4,-65,-21,-23,6,-34,25,-47,30,73,-24,24,65,52,43,37,4,-16,-24,0,-10,-49,4, 
  /* [1][0][][] */ 42,47,9,-67,-12,-29,-10,29,-31,70,45,-26,36,13,-69,-28,11,0,-66,44,-3,-123,-12,23,20,-44,-8,-45,60,-66,127,-73,64,15,-22,72,17,115,0,-49,7,42,-11,-9,2,71,-86,-20,-29,-5,-14,-21,32,-24,-8,69,-14,41,1,68,48,87,10,-126,-2,11,-64,24,-46,-45,-62,-30,-15,-26,5,-61,-4,6,-7,-40,-25,-54,-73,16,38,9,32,5,-45,5,-49,33,49,45,-94,39, 
  /* [2][0][][] */ 56,-64,49,52,-12,-53,63,3,0,-55,1,-7,-127,-33,26,-46,-91,-28,-40,16,-10,-41,-24,51,-46,-84,13,-25,-29,20,-84,124,-65,121,-30,-7,-6,-59,-25,6,-86,61,79,-11,-43,-9,-38,-32,12,-34,-24,-39,36,-53,-44,55,71,-54,15,-58,-31,-2,-33,34,54,17,11,-21,60,73,-42,3,22,30,72,49,51,-64,77,25,77,1,-17,-25,-74,0,-26,60,-13,5,-7,31,-80,50,1,39, 
  /* [3][0][][] */ -6,-6,-22,3,13,-18,-1,-60,-28,37,17,28,12,-15,-36,21,-2,-54,21,-20,24,127,37,-41,-10,27,-20,1,67,-52,49,-21,-27,24,-11,-9,-3,37,28,4,-37,-22,-9,15,-36,20,17,-17,-5,-53,6,-18,32,-54,-19,-47,25,60,-11,-6,-5,-3,-29,19,25,18,-23,-17,0,9,26,-33,-26,-12,25,8,5,6,7,-29,-18,6,-57,19,-4,-46,24,2,7,25,14,-22,48,20,3,43, 
  /* [4][0][][] */ 77,34,-77,-29,24,48,-31,-3,-8,68,97,-23,18,9,42,-47,43,-15,-90,40,-12,-83,55,78,-97,4,-127,37,-47,-53,7,13,-80,-70,-2,85,42,37,39,-12,-27,-30,13,9,7,15,-43,54,-61,76,6,45,45,12,-57,32,77,-11,-17,26,48,-17,16,-7,-70,30,-32,57,-62,17,-73,46,20,-75,-23,-55,12,-68,-43,-4,-53,42,-88,18,-34,49,14,-83,39,-3,43,3,-89,-10,34,35, 
  /* [5][0][][] */ -95,21,81,-13,70,-21,48,21,-33,38,10,-18,-22,-27,-16,-55,-16,-40,46,39,-127,-47,-108,80,-30,-24,37,-7,56,-47,-28,49,42,123,-41,54,9,14,15,15,-44,120,76,-48,16,55,29,27,22,-3,-25,22,-31,-39,22,-62,66,-49,-28,-49,41,100,-30,-25,62,-2,-100,-88,-96,11,-35,-64,-10,-17,-43,-39,52,-73,-48,-6,103,-8,39,-90,-79,37,61,-21,-60,28,27,26,-2,34,1,71, 
  /* [6][0][][] */ 13,-54,-40,43,-27,-63,74,61,-34,22,-23,34,-87,-79,48,19,-8,-18,-22,-15,-39,-13,-8,-28,-32,14,65,33,46,14,52,-9,-8,32,-27,-45,12,-15,5,54,17,18,-17,-49,-7,-66,-65,13,10,-98,-8,50,2,-23,12,-48,92,-2,-7,-32,-127,15,-75,35,17,19,15,35,52,42,0,-17,-53,4,70,37,62,-16,38,-68,-24,-39,-24,3,-17,-64,14,39,-45,24,19,42,-41,8,1,86, 
  /* [7][0][][] */ 35,67,-65,-39,-49,-6,44,-50,-32,1,-58,-52,2,7,6,-6,-37,-28,-22,40,6,127,37,-8,-31,19,33,35,27,9,57,-11,59,22,-3,-21,3,-29,11,3,-28,-28,21,-44,-8,-40,62,-44,5,-60,-77,-26,-30,8,1,-22,-7,-5,-109,-21,-8,60,3,-9,-25,-40,-15,16,11,-22,-93,83,-1,81,-22,31,-65,58,33,-74,-16,-35,34,-56,41,-36,-49,8,-10,69,-72,13,28,-49,-22,23, 
  /* [8][0][][] */ 27,106,-61,14,-38,-31,-87,17,-96,-20,-28,-2,-19,56,30,99,24,-71,-35,28,45,-25,-26,-29,-33,93,-15,46,-25,-5,4,-38,-17,-73,-23,-92,-50,47,57,-27,0,-41,-12,18,-62,-49,36,-3,7,0,30,88,-18,12,-63,121,-79,63,35,6,-20,15,18,29,-12,-69,-39,1,-36,-14,8,17,0,-25,-122,-44,-73,26,-89,-11,-6,-3,-60,3,5,22,38,28,26,70,-77,-13,-81,-127,13,-51, 
  /* [9][0][][] */ -61,20,-44,38,3,-37,49,92,-26,59,11,108,-65,-9,36,127,19,19,87,2,11,-6,30,-73,-3,-9,3,-33,2,9,24,42,-13,-25,-5,-100,32,-10,-15,2,-45,40,53,-28,40,32,9,35,55,85,39,-24,-58,-79,-8,13,26,3,74,-20,-54,68,-24,-37,70,10,-45,6,-103,25,24,-8,12,67,-35,-5,-17,-1,-43,-5,44,-47,83,-2,32,16,-11,-62,-58,35,23,22,69,39,-56,-17, 
  /* [10][0][][] */ 93,-2,-103,3,-64,-44,79,-50,-13,-30,-34,-24,-34,-11,-8,-7,-43,-34,26,24,52,41,29,-40,-47,74,39,1,-47,-78,-9,2,90,-56,63,12,47,-86,95,77,27,-79,12,21,-38,-80,-8,49,28,103,-99,-67,-7,58,10,47,-22,-11,48,56,13,33,-70,-30,9,-104,17,75,54,-18,-25,107,127,82,5,-116,-2,-9,61,-12,-46,8,10,42,-14,9,-18,30,-37,4,34,38,50,62,-26,23, 
  /* [11][0][][] */ 6,-6,8,-48,-5,-7,-8,-61,34,-29,-6,-5,50,7,13,5,-39,-22,48,-2,-15,37,-37,-86,-14,12,-20,48,29,-55,61,-25,17,1,33,-29,-75,10,-73,3,-31,38,-70,73,7,1,21,-39,10,-21,-63,-29,34,51,62,-53,-44,-25,3,-14,-6,-46,-24,-94,2,-77,67,98,127,6,48,19,-35,5,51,-36,56,46,30,33,28,13,-12,81,66,7,-21,-16,-37,-41,-4,-16,34,48,50,48, 
  /* [12][0][][] */ 77,-2,-33,-58,50,117,24,-8,37,69,-19,35,75,68,-3,43,-40,56,2,73,107,-27,50,-95,59,32,-49,-51,-42,75,46,9,56,-27,12,-50,36,39,-38,-45,13,-28,-1,64,-46,29,39,-14,-55,61,-2,0,-8,7,39,28,-73,110,35,108,59,-46,5,-127,0,83,-4,-23,-20,-70,46,16,-12,22,8,52,-32,57,-83,16,-25,-15,97,78,-8,98,-11,-81,85,21,-92,19,91,20,-32,-65, 
  /* [13][0][][] */ -21,41,-30,-28,-37,17,21,-58,19,-37,-58,-85,81,-119,-67,-52,-32,-14,-59,-23,-85,10,43,52,-25,26,104,24,22,-65,58,65,0,12,-87,70,-29,-52,3,-42,127,-23,4,8,-35,-109,38,-46,43,-24,-27,44,38,-42,10,22,45,-74,-63,-37,38,0,-19,-55,-13,10,-10,27,-38,-5,-80,52,-83,7,-29,-76,-109,49,52,59,-35,49,45,-91,30,20,-12,1,-32,6,-23,4,-58,24,-6,10, 
  /* [14][0][][] */ -53,18,-35,-17,117,100,-97,39,4,-22,105,4,-27,-41,-50,-81,-80,26,35,127,-18,-39,-7,33,36,36,-32,41,19,-21,-21,27,61,16,-65,24,-27,78,45,44,27,26,48,-35,22,-37,51,-42,37,-22,-3,-37,32,-6,-35,2,42,65,-76,-23,-31,-40,-24,-99,-6,9,-68,-24,-122,74,-8,-23,-7,-63,-43,1,65,-41,-62,-18,13,2,18,-33,-30,48,38,-33,-30,53,91,53,5,-18,-56,-79, 
  /* [15][0][][] */ -79,-71,44,-25,-10,-6,-15,-77,3,-15,-11,36,-15,-35,18,63,-85,-2,29,-66,14,-13,14,-58,26,-17,50,-35,-49,-95,-70,38,-36,36,59,-80,3,-52,15,-16,11,-15,55,-33,-6,-14,26,61,-57,-30,34,-40,-24,19,15,-48,-37,-52,59,-42,-49,-8,-69,50,-60,-28,8,-3,68,-39,64,-13,31,-27,-16,-31,25,21,72,-12,-1,55,28,-4,-17,-37,-127,19,-20,-43,-58,7,17,-26,6,61, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0022333802189677954, 0.0024408616591244936, 0.0015258253552019596, 0.0031043062917888165, 0.0017651879461482167, 0.002750924089923501, 0.0027500272262841463, 0.002758651040494442, 0.002825853182002902, 0.0018777484074234962, 0.0022635441273450851, 0.0038203613366931677, 0.0021588136442005634, 0.0020601253490895033, 0.0032986858859658241, 0.0025855693966150284, } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { -2977, -282, -3508, -4796, -3996, 3426, -1505, 2320, 852, 9074, 9630, -1958, 1327, 10638, 13313, 1460, 12545, -6249, -7315, 1538, -2998, -5545, 1453, -2544, -773, 1662, 4027, -3885, 6659, -9140, -1642, -2020, 12108, -6836, -1174, 389, 266, -608, -523, 3248, 1073, -1302, 6019, -4918, 15977, 16218, 3204, 9679, -2654, 4880, 12589, -3400, -121, 29, 1520, 7119, -874, 5835, 8340, 4148, 4706, 4371, 10460, -12858, 3700, -816, -1217, -1200, -5935, -4158, 8298, 3315, 8608, -927, -3099, 10532, -2043, -4334, 7327, 5499, -3877, 11871, -1901, 3480, 16955, 3248, -7677, -6883, -4819, -4648, 15236, 333, 5068, 2686, -5193, -2453, };
const TfArray<96, float> quant10_scale = { 96, { 0.00032108643790706992, 0.00022859525051899254, 0.00012862503353971988, 0.00020601782307494432, 0.00023796816822141409, 0.00030409905593842268, 0.00035649340134114027, 0.00038673443486914039, 0.00016732097719796002, 0.00015003490261733532, 8.9051929535344243e-05, 0.00036114759859628975, 0.00025327422190457582, 0.0001431734417565167, 0.00010171796020586044, 0.00021605423535220325, 0.00013703407603316009, 0.00018367994925938547, 0.00011715223809005693, 9.2692978796549141e-05, 0.00014035638014320284, 0.00025538832414895296, 0.00020218233112245798, 0.00027503116871230304, 0.00030083625460974872, 0.00011282810737611726, 0.00028510589618235826, 0.00011718585301423445, 0.00015961113967932761, 0.00011159737186972052, 0.00038122420664876699, 0.00028914038557559252, 0.00015357050870079547, 9.2985646915622056e-05, 0.00027755848714150488, 0.00015248674026224762, 0.00018504724721424282, 0.00043317631934769452, 0.00038721074815839529, 0.00013335498806554824, 0.00015634414739906788, 0.00014799991913605481, 0.00023645281908102334, 0.00016551568114664406, 6.7080836743116379e-05, 7.6313343015499413e-05, 0.00012137253361288458, 0.00010119891521753743, 0.00019371349480934441, 0.00013143158867023885, 0.00011454063496785238, 9.3659778940491378e-05, 8.2057034887839109e-05, 0.00014954771904740483, 0.00020254298578947783, 0.00015406137390527874, 0.00015944671758916229, 0.00019197646179236472, 0.00015208173135761172, 0.00018000300042331219, 0.00022301223361864686, 0.00021822286362294108, 0.00013994153414387256, 6.2726547184865922e-05, 0.00014727067900821567, 0.00032402999931946397, 0.00049384782323613763, 0.00032231141813099384, 0.00020218805002514273, 0.00013355376722756773, 0.00018908246420323849, 0.00015310048183891922, 0.00011051492765545845, 0.00025527228717692196, 0.00027582838083617389, 0.00012148125824751332, 0.00014757270400878042, 0.00017729436513036489, 0.00018030477804131806, 6.2322302255779505e-05, 0.00025646056747063994, 0.00010208987077930942, 0.00023798436450306326, 0.00019655695359688252, 8.115886157611385e-05, 0.00016547745326533914, 8.705051732249558e-05, 7.7989214332774282e-05, 0.00024680883507244289, 0.0002044165157712996, 8.7819280452094972e-05, 0.00052661221707239747, 0.00020028550352435559, 0.00014089404430706054, 9.5547540695406497e-05, 0.00017666722123976797, } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 22,127,-17,-2,-1,-27,40,33,48,-90,-127,77,-35,-5,-5,-127,-38,17,52,54,75,96,71,106,65,-71,-30,14,-27,39,24,-61,-31,-5,-28,20,-3,54,52,-27,58,-55,-9,5,-88,-84,1,39,-21,-79,14,83,33,55,-47,-100,-115,-127,-37,-127,-116,-4,-92,-10,-37,46,105,-13,-49,-19,-3,-31,47,29,27,-15,34,-14,-97,-23,33,-109,77,-49,-123,-98,19,-9,-59,-20,-70,47,93,-10,96,13, -14,-31,51,13,-13,52,-5,-34,35,-26,-83,80,-36,-60,-107,106,-61,127,81,127,127,25,127,127,-3,-76,7,46,-11,127,-2,-109,28,111,12,69,41,127,-27,-127,127,13,63,60,-26,-82,98,-23,25,-117,-126,41,-16,117,-14,-127,9,20,-127,-52,59,-127,-40,127,-41,86,75,10,25,127,79,-18,-84,52,-43,-122,60,-56,4,76,40,-24,127,-55,5,-104,97,77,94,56,-75,15,115,-20,127,71, -5,-66,41,23,-1,-31,8,17,6,94,-72,7,-1,14,-20,-119,-9,37,-14,72,27,43,-6,90,22,-127,28,41,-7,71,-1,6,-48,-79,-27,126,-24,-14,-6,-48,7,40,-17,20,-79,-93,10,-33,-4,-39,18,44,59,8,-12,100,53,-123,-47,-32,25,60,-90,-5,2,-9,-31,4,-43,25,5,-27,-19,-36,-15,9,-11,-15,-36,-55,12,-73,59,-53,45,-55,59,-38,-43,0,-99,29,-5,33,3,43, 
  /* [0][1][][] */ 63,20,57,97,9,-56,120,5,-64,-127,-40,127,-17,-127,-101,6,-83,-11,124,44,-66,11,-89,-28,2,-3,-127,127,-127,54,127,127,8,127,29,127,-127,15,-18,18,23,-127,-4,78,-127,-43,-33,-27,-78,-127,-66,38,127,-58,67,8,-110,-36,-36,-38,-127,-54,-40,120,-127,-3,127,-47,-5,83,-60,-75,-127,27,127,-40,106,110,-83,-107,127,-127,-47,127,-47,-22,113,127,8,-18,-72,16,-37,-127,82,-63, -127,-49,-26,52,-66,-127,-127,-127,29,-19,-35,46,-100,-45,-7,100,-127,-111,127,111,22,-127,-80,44,-111,120,8,87,-108,-30,-104,101,-127,119,127,47,31,31,127,-18,-41,55,-9,75,6,71,-127,-27,17,10,-93,127,89,32,16,38,29,-8,103,11,99,-14,-127,61,-30,-127,54,127,-3,38,-127,-112,20,87,-75,-127,127,127,97,-114,-81,79,-83,95,-85,-127,120,127,127,127,-127,-127,-127,-84,47,127, 79,-3,119,127,40,-29,7,31,-38,52,-53,5,-8,-48,-79,24,-9,-6,12,-2,-121,12,-92,-49,25,18,63,-32,113,110,48,-35,-1,-80,-26,118,-98,-44,-25,-34,5,126,-12,127,-35,-43,-48,-127,127,-27,-127,6,96,-127,-127,29,127,-23,-63,102,-32,16,9,121,113,-38,94,-3,-32,16,-52,-55,-66,-127,34,-100,44,36,-127,-127,-98,-49,-17,96,-70,31,-26,58,0,-48,-32,22,-46,123,18,-50, 
  /* [0][2][][] */ 57,-103,50,33,18,35,54,17,-47,-110,11,-16,34,-50,-69,-7,0,28,-6,97,-6,90,-24,57,83,-14,-36,-11,-72,-6,5,112,-51,41,-52,10,25,-44,-15,-57,-38,-7,-36,-68,-64,3,-22,-60,-42,88,-10,2,-26,88,-22,-32,3,-18,49,-21,-127,-13,-2,83,-80,65,-2,-33,98,61,-3,127,26,-34,27,27,-8,6,-42,-15,13,-45,-31,-85,-116,13,127,90,-56,16,-22,16,-30,-36,8,-85, 4,53,127,-7,127,73,-17,-14,-127,-27,-83,-24,127,14,-127,-21,-7,94,10,-25,9,34,51,-14,127,-125,-20,-30,-74,59,-3,100,-98,93,28,-43,83,10,10,-67,-41,4,-127,76,-78,-88,-55,-100,10,46,-77,63,117,-43,-49,-66,0,116,0,28,45,-46,36,119,-15,24,41,-1,127,55,-28,95,-99,38,-7,-46,20,-55,-70,-93,33,-48,-15,-95,-44,125,63,39,82,25,47,11,-30,-42,-5,-63, 20,74,53,-15,20,21,-2,29,-23,2,-21,-15,1,-6,-63,-25,-52,51,31,50,-44,77,-50,-10,37,4,-9,30,-19,25,-26,21,-16,35,-32,-30,39,-5,-10,1,-41,-3,-38,28,-63,-127,-18,-7,-15,50,-64,-64,47,-50,16,-6,21,26,25,87,-97,15,-19,51,53,14,-97,25,60,58,-26,29,-43,-27,33,53,-8,34,62,-48,24,-101,-45,-18,-127,47,-59,62,-46,80,8,6,-19,-31,-30,-103, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.013646173290908337, 0.0097152981907129288, 0.0054665636271238327, 0.0087557574734091759, 0.01011364720761776, 0.012924210168421268, 0.015150969848036766, 0.016436213627457619, 0.0071111414581537247, 0.0063764830119907856, 0.0037847068160772324, 0.015348772518336773, 0.010764153674244881, 0.0060848710127174854, 0.0043230131268501282, 0.0091823050752282143, 0.0058239479549229145, 0.0078063975088298321, 0.0049789701588451862, 0.0039394516497850418, 0.0059651457704603672, 0.010854003950953484, 0.0085927490144968033, 0.011688824743032455, 0.012785539962351322, 0.0047951946035027504, 0.012117000296711922, 0.0049803988076746464, 0.0067834733054041862, 0.004742888268083334, 0.016202028840780258, 0.012288466095924377, 0.0065267463214695454, 0.0039518899284303188, 0.011796235106885433, 0.006480686366558075, 0.0078645078465342522, 0.018409993499517441, 0.016456456854939461, 0.0056675868108868599, 0.006644626148045063, 0.0062899962067604065, 0.01004924438893795, 0.0070344163104891777, 0.0028509355615824461, 0.0032433171290904284, 0.0051583326421678066, 0.0043009538203477859, 0.0082328235730528831, 0.0055858423002064228, 0.0048679769970476627, 0.0039805406704545021, 0.0034874239936470985, 0.0063557778485119343, 0.0086080767214298248, 0.0065476084128022194, 0.0067764855921268463, 0.0081589994952082634, 0.0064634736627340317, 0.0076501276344060898, 0.0094780195504426956, 0.0092744715511798859, 0.0059475153684616089, 0.0026658782735466957, 0.0062590036541223526, 0.013771274127066135, 0.020988533273339272, 0.013698235154151917, 0.0085929920896887779, 0.0056760348379611969, 0.0080360043793916702, 0.006506770383566618, 0.0046968841925263405, 0.01084907166659832, 0.011722706258296967, 0.0051629533991217613, 0.0062718400731682777, 0.0075350101105868816, 0.0076629528775811195, 0.0026486979331821203, 0.010899574495851994, 0.0043388195335865021, 0.010114335455000401, 0.0083536701276898384, 0.0034492516424506903, 0.007032791618257761, 0.0036996467970311642, 0.003314541419968009, 0.010489375330507755, 0.0086877020075917244, 0.0037323194555938244, 0.022381018847227097, 0.0085121337324380875, 0.0059879967011511326, 0.0040607703849673271, 0.0075083565898239613, } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 6208, 1661, 60, -593, 5168, 11918, 12281, 2728, 57, 13261, 765, -4359, 3079, 2715, 1038, 236, 2648, 6895, -300, -1059, 3239, 12102, 6608, -2170, -3511, -204, 12192, 578, 4070, 2995, 6987, -5290, 16204, 3552, 8500, -3524, 496, -3844, -1272, 1107, 2364, 782, 4748, -611, 931, 1340, 5188, 3678, 1713, 3543, 6201, 2159, -1834, 1584, 900, 1936, 1979, 3311, 6662, 2482, -1774, 2764, 2428, 3981, 4340, 10773, -6771, 2073, 2772, -470, 4680, 390, 2044, 4206, 2177, 1203, -1128, 1151, 1685, 3218, 2587, 3778, 12726, 553, 1734, 7121, 101, -1024, 7539, 51, 847, -1516, 7802, 1861, 118, -274, };
const TfArray<96, float> quant12_scale = { 96, { 0.00013445442891679704, 0.00016374381084460765, 0.0002367207343922928, 0.00016125729598570615, 0.00013675368973053992, 7.3763425461947918e-05, 7.4475654400885105e-05, 0.00019487098325043917, 0.00019334115495439619, 6.7664928792510182e-05, 0.00015991264081094414, 0.00012042815069435164, 0.00019820970192085952, 0.00016116720507852733, 0.00017570884665474296, 0.00026891913148574531, 0.00022600000374950469, 9.9605334980878979e-05, 0.00016015551227610558, 0.00015163586067501456, 0.00018340761016588658, 6.6933454945683479e-05, 0.00011752400314435363, 0.00018442032160237432, 0.00015008998161647469, 0.00028107230900786817, 7.0534741098526865e-05, 0.00014075703802518547, 0.00012542308832053095, 0.00011494655336719006, 0.00010140281665371731, 9.3978822405915707e-05, 5.3796407883055508e-05, 0.00013174673949833959, 9.4384828116744757e-05, 0.00016025947115849704, 0.00014323847426567227, 0.00016914781008381397, 0.00010895372543018311, 0.00019191449973732233, 0.00017658683646004647, 0.00022355388500727713, 0.00010277297405991703, 0.00021629157708957791, 0.00016660368419252336, 0.00021846343588549644, 0.00010560244118096307, 0.00017148989718407393, 0.00028329421184025705, 0.00015427882317453623, 0.00011325571540510282, 0.00017094204667955637, 0.00020178596605546772, 0.00018201312923338264, 0.00031618017237633467, 0.0001883773657027632, 0.00022446694492828101, 0.00015819103282410651, 0.00012118934682803228, 0.00015762710245326161, 0.00019300497660879046, 0.00019215750216972083, 0.00023533929197583348, 0.00014137523248791695, 0.00016361587040591985, 8.644411718705669e-05, 0.00010778631258290261, 0.00020098744425922632, 0.00017444421246182173, 0.00027233813307248056, 0.00014141018618829548, 0.00024111563106998801, 0.000212708386243321, 0.00012206876272102818, 0.00019757129484787583, 0.0001890408166218549, 0.00014725388609804213, 0.00024606985971331596, 0.00020104607392568141, 0.00015607340901624411, 0.00016896473243832588, 0.00012540057650767267, 6.7595785367302597e-05, 0.00015985853679012507, 0.00020057529036421329, 0.00010246603051200509, 0.00017989438492804766, 0.00019728529150597751, 0.00011318236647639424, 0.0002141588629456237, 0.00019126781262457371, 0.00014766232925467193, 0.00010557123459875584, 0.00018750228628050536, 0.00023306967341341078, 0.00023171701468527317, } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -25,25,-10,19,-41,-127,-23,1,80,-100,67,-30,121,-44,-3,-51, 
  /* [1][0][][] */ -66,86,-74,-127,-73,17,-24,47,-67,5,103,23,11,126,45,45, 
  /* [2][0][][] */ -13,14,-100,8,-19,-8,74,-46,-55,127,67,-13,3,32,-21,97, 
  /* [3][0][][] */ -80,-60,-2,-34,-85,-10,-13,-127,-14,79,39,-90,-84,-83,-101,-23, 
  /* [4][0][][] */ 17,-21,-24,96,-106,62,-127,75,-39,107,51,-17,-32,81,-3,-16, 
  /* [5][0][][] */ -117,14,-24,-13,93,-61,-17,-36,107,17,-36,-6,14,-127,-63,-12, 
  /* [6][0][][] */ -59,-92,-15,3,-91,55,102,-51,8,-47,127,-35,6,-19,-91,100, 
  /* [7][0][][] */ 6,61,127,-14,39,63,6,-56,14,41,-89,-22,24,-8,18,49, 
  /* [8][0][][] */ -50,-7,14,17,41,62,89,127,-6,-12,-47,-84,36,51,-52,-54, 
  /* [9][0][][] */ 2,-11,106,44,-123,-14,-101,-84,27,49,111,-29,-36,-60,127,66, 
  /* [10][0][][] */ -7,-107,-1,-105,-125,95,22,18,-34,-106,29,53,24,68,-127,0, 
  /* [11][0][][] */ 127,-49,3,76,-107,-48,5,-34,120,92,-86,70,11,-123,-34,78, 
  /* [12][0][][] */ -42,-20,52,3,74,21,51,40,61,6,47,47,-10,26,-127,13, 
  /* [13][0][][] */ -19,-51,19,30,16,-1,62,37,-67,-23,4,11,-8,127,95,-34, 
  /* [14][0][][] */ 127,-43,101,37,81,124,114,49,75,33,30,70,75,-29,26,-55, 
  /* [15][0][][] */ -44,65,52,-27,31,94,-127,65,-3,-32,-33,-14,-83,35,-14,7, 
  /* [16][0][][] */ -53,39,80,-51,39,67,2,9,-9,-9,3,60,83,20,73,127, 
  /* [17][0][][] */ 53,127,43,-99,70,-65,-8,-36,4,84,-37,82,-32,-10,80,-49, 
  /* [18][0][][] */ -126,-37,-69,-51,86,84,-2,-77,58,112,127,48,-8,85,-60,16, 
  /* [19][0][][] */ 60,127,93,84,55,-21,21,-9,-63,110,12,81,90,67,-59,42, 
  /* [20][0][][] */ 127,24,-45,58,-45,11,-15,26,-38,-47,-60,6,71,7,39,-40, 
  /* [21][0][][] */ -79,-127,-49,95,-113,-69,-100,37,-66,-84,78,55,-33,98,-45,34, 
  /* [22][0][][] */ 65,-40,-23,-43,106,-60,-70,64,17,63,71,127,-1,56,17,45, 
  /* [23][0][][] */ -62,29,-6,42,-13,10,127,64,-8,89,-9,-9,-5,51,-39,-18, 
  /* [24][0][][] */ 86,-98,-14,54,121,79,127,-91,20,83,74,12,-79,97,51,-16, 
  /* [25][0][][] */ 119,-40,2,34,23,-22,4,97,59,-6,-31,5,127,-8,70,34, 
  /* [26][0][][] */ 127,38,87,89,95,-36,-100,-31,-23,52,-2,110,55,-18,-12,-98, 
  /* [27][0][][] */ -27,33,-67,48,-24,78,-14,-80,2,-62,95,6,21,-15,127,73, 
  /* [28][0][][] */ -36,11,-62,-127,5,-63,10,-82,-28,51,-52,21,-18,5,-40,54, 
  /* [29][0][][] */ 71,93,-73,13,54,57,-44,-59,44,75,-15,50,-127,-14,-56,76, 
  /* [30][0][][] */ 42,112,-107,-61,127,-28,-60,30,-75,46,-106,0,15,26,-21,64, 
  /* [31][0][][] */ -15,-125,88,68,48,-65,-127,-45,-73,101,-2,-85,-114,-4,99,116, 
  /* [32][0][][] */ -90,60,2,71,-127,26,1,86,39,-117,47,-101,46,53,76,101, 
  /* [33][0][][] */ -127,-2,48,84,-50,40,-41,0,-36,-40,19,-55,-27,-7,59,127, 
  /* [34][0][][] */ -15,22,-24,-124,81,-3,-48,80,44,54,-77,-21,-107,-80,-47,127, 
  /* [35][0][][] */ 40,-23,32,51,-18,50,-121,14,-2,-127,-45,24,-27,-9,68,-29, 
  /* [36][0][][] */ 0,22,-121,18,15,127,5,41,8,-18,62,60,27,82,-45,85, 
  /* [37][0][][] */ 70,35,104,-53,68,-118,86,40,-127,27,-24,13,44,107,74,26, 
  /* [38][0][][] */ -32,127,50,-27,51,-44,71,-92,57,-80,-106,69,2,-103,-124,14, 
  /* [39][0][][] */ 46,1,-127,-104,-22,22,74,-1,8,-8,48,-15,36,49,-121,-23, 
  /* [40][0][][] */ -21,21,-72,-24,-38,-5,38,-76,8,-21,44,17,49,127,55,76, 
  /* [41][0][][] */ -8,-127,-17,38,-3,-27,-81,-22,-16,-41,63,-54,-83,11,53,21, 
  /* [42][0][][] */ -125,70,42,-127,76,4,35,-77,125,35,-117,-21,124,-83,-22,-3, 
  /* [43][0][][] */ 26,42,3,7,127,31,-11,34,6,24,-3,-35,-85,-27,-24,-42, 
  /* [44][0][][] */ 43,-25,17,14,-37,-38,17,96,1,-91,46,-9,127,55,-35,7, 
  /* [45][0][][] */ 31,-96,-29,29,-42,-62,-15,7,-5,-34,19,50,-70,127,36,-39, 
  /* [46][0][][] */ -31,-84,41,124,18,33,-127,107,61,-35,54,-14,-28,51,105,91, 
  /* [47][0][][] */ -17,-44,35,109,6,33,75,27,7,-70,-127,-68,31,-27,-42,45, 
  /* [48][0][][] */ -42,97,-57,-6,-20,63,53,-116,-12,-58,89,-54,40,-127,-32,30, 
  /* [49][0][][] */ -50,-26,67,-22,22,10,126,127,-39,-46,6,23,-21,53,-45,54, 
  /* [50][0][][] */ 63,4,-41,16,26,-127,-72,24,-82,11,-27,-8,42,-51,-91,-48, 
  /* [51][0][][] */ 3,127,-89,98,-42,60,-42,-57,-44,-84,31,-48,-2,51,-32,100, 
  /* [52][0][][] */ -104,15,17,-3,25,31,49,-1,42,-60,-52,-57,-110,-68,-127,-21, 
  /* [53][0][][] */ -86,-56,-106,-127,22,60,-23,126,59,-8,-25,-58,-43,11,95,97, 
  /* [54][0][][] */ 14,-26,11,-27,-36,73,61,-10,-29,-71,34,28,-36,-18,-127,43, 
  /* [55][0][][] */ -82,-61,-82,51,74,1,110,127,-24,16,-113,-122,32,-87,-3,100, 
  /* [56][0][][] */ 33,-52,-12,-31,-105,15,-127,11,-29,-37,-38,18,65,-21,37,-5, 
  /* [57][0][][] */ -20,-11,38,-2,58,13,78,31,-54,45,-48,1,-4,127,-93,-16, 
  /* [58][0][][] */ 7,1,45,9,45,-7,-65,-44,55,-127,-111,2,-77,-48,-20,81, 
  /* [59][0][][] */ -31,-2,14,-4,15,26,-35,-25,30,127,-77,-12,15,-25,-48,15, 
  /* [60][0][][] */ 15,-66,-21,20,-127,-48,-8,-39,-37,68,-36,38,-23,-59,22,78, 
  /* [61][0][][] */ 47,23,-62,-10,-19,-23,-127,-81,-69,6,18,98,68,-51,76,41, 
  /* [62][0][][] */ 14,-8,41,17,-21,7,34,127,9,122,27,52,23,3,53,48, 
  /* [63][0][][] */ -4,-127,-6,-37,-60,-2,24,-14,-8,-21,5,-14,-33,87,79,53, 
  /* [64][0][][] */ -64,6,-127,-53,16,66,48,-19,15,-33,66,-49,-19,-64,-43,116, 
  /* [65][0][][] */ -26,12,63,75,73,28,88,60,-73,13,-127,-82,10,123,-49,-29, 
  /* [66][0][][] */ -34,-111,20,-74,-33,-127,1,-36,-18,-21,-17,40,-34,-52,-41,54, 
  /* [67][0][][] */ 14,-23,-51,-62,-50,89,-44,-127,-82,12,-114,-61,23,-32,-94,7, 
  /* [68][0][][] */ 84,19,30,-29,-96,-69,-56,-53,-55,-127,-29,14,17,-12,53,-55, 
  /* [69][0][][] */ 2,2,47,10,-25,-15,4,5,-25,127,-7,-35,-20,14,95,14, 
  /* [70][0][][] */ 63,-11,-53,120,-127,67,-21,-112,116,105,8,29,112,-65,-30,7, 
  /* [71][0][][] */ 19,-89,127,46,-40,-66,24,-3,78,-28,0,7,59,-31,21,15, 
  /* [72][0][][] */ 20,-13,38,127,39,30,-55,104,76,-16,73,0,9,-20,-36,69, 
  /* [73][0][][] */ -3,-33,63,-98,11,-51,-92,42,-14,127,-31,-11,2,-70,35,17, 
  /* [74][0][][] */ 127,64,3,-6,-98,-67,31,-45,-91,-28,-31,-5,-8,-107,-51,9, 
  /* [75][0][][] */ 93,127,-45,61,50,40,15,-35,13,-23,-3,55,-74,36,37,29, 
  /* [76][0][][] */ -113,-49,15,-15,-87,-26,87,-11,-44,62,91,0,-79,-127,-5,77, 
  /* [77][0][][] */ -26,127,-18,21,21,26,49,72,52,-17,-29,50,-82,5,11,89, 
  /* [78][0][][] */ 101,56,-42,48,-47,53,-127,-5,-10,-19,-72,38,12,-79,42,23, 
  /* [79][0][][] */ -75,-51,127,84,-22,-74,-50,-10,-46,-1,-5,-9,-50,118,-28,71, 
  /* [80][0][][] */ 55,123,28,-127,3,71,77,-50,0,53,-24,10,22,-87,45,-8, 
  /* [81][0][][] */ 34,-34,42,-94,126,69,-7,90,127,75,-56,-71,-53,-26,-105,-91, 
  /* [82][0][][] */ 78,56,62,-7,127,-110,27,71,25,112,-25,44,-26,-80,29,-111, 
  /* [83][0][][] */ 53,72,39,28,115,51,81,113,-23,82,-127,-85,-81,82,-54,-92, 
  /* [84][0][][] */ -4,-20,-96,30,23,6,-24,-14,-83,127,-24,11,-111,13,-18,-66, 
  /* [85][0][][] */ -127,104,-73,-15,-1,-21,-50,-40,-4,82,12,-48,-104,-89,-103,6, 
  /* [86][0][][] */ -25,58,105,127,6,-48,100,54,-44,18,-21,-51,48,121,-103,-30, 
  /* [87][0][][] */ -30,54,118,-60,-127,-41,41,32,34,-79,64,60,-15,67,-26,4, 
  /* [88][0][][] */ -13,-37,-87,36,35,76,-19,44,-33,-27,-126,-127,83,-4,20,-3, 
  /* [89][0][][] */ 40,47,-10,-68,-6,-51,-68,55,127,-25,39,-89,2,-29,69,-77, 
  /* [90][0][][] */ 18,60,17,-8,-15,59,8,78,-27,-94,-7,127,69,28,-23,63, 
  /* [91][0][][] */ -75,2,2,50,79,37,-14,-112,-50,54,19,16,-81,-127,-50,-42, 
  /* [92][0][][] */ -1,48,-11,-63,-127,8,-108,68,-37,27,99,51,-14,-19,77,20, 
  /* [93][0][][] */ 113,45,89,84,-127,-48,12,-2,-35,-66,-15,-60,0,-47,17,-24, 
  /* [94][0][][] */ -20,-127,15,-114,20,26,-17,16,58,-57,28,56,21,68,-45,39, 
  /* [95][0][][] */ -23,-63,-47,-64,85,127,-47,47,61,78,-64,62,-49,110,-53,35, 
};
const TfArray<96, float> quant13_scale = { 96, { 0.001627448364160955, 0.0019819696899503469, 0.0028652888722717762, 0.0019518727203831077, 0.0016552788438275456, 0.00089283910347148776, 0.00090145994909107685, 0.0023587357718497515, 0.0023402185179293156, 0.00081902235979214311, 0.0019355968106538057, 0.0014576730318367481, 0.00239914795383811, 0.0019507821416482329, 0.0021267954725772142, 0.0032550210598856211, 0.0027355242054909468, 0.0012056318810209632, 0.0019385366467759013, 0.0018354139756411314, 0.0022199819795787334, 0.00081016850890591741, 0.0014225209597498178, 0.0022322400473058224, 0.0018167024245485663, 0.0034021243918687105, 0.00085375877097249031, 0.0017037357902154326, 0.0015181321650743484, 0.0013913232833147049, 0.001227388740517199, 0.0011375279864296317, 0.00065115652978420258, 0.0015946741914376616, 0.0011424423428252339, 0.0019397949799895287, 0.0017337712924927473, 0.0020473801996558905, 0.0013187855947762728, 0.002322950167581439, 0.0021374227944761515, 0.0027059160638600588, 0.0012439732672646642, 0.0026180124841630459, 0.002016585785895586, 0.002644300926476717, 0.0012782213743776083, 0.0020757289603352547, 0.0034290184266865253, 0.0018674046732485294, 0.0013708572369068861, 0.0020690977107733488, 0.0024424353614449501, 0.0022031031548976898, 0.0038270729128271341, 0.0022801363375037909, 0.002716967836022377, 0.0019147583516314626, 0.0014668866060674191, 0.0019079324556514621, 0.0023361493367701769, 0.0023258915171027184, 0.0028485676739364862, 0.0017112183850258589, 0.0019804211333394051, 0.0010463272919878364, 0.0013046551030129194, 0.002432769862934947, 0.0021114882547408342, 0.0032964050769805908, 0.0017116415547206998, 0.0029184850864112377, 0.0025746412575244904, 0.0014775311574339867, 0.0023914205376058817, 0.0022881668992340565, 0.0017823742236942053, 0.0029784515500068665, 0.002433479530736804, 0.0018891264917328954, 0.0020451641175895929, 0.0015178597532212734, 0.00081818539183586836, 0.0019349419744685292, 0.0024277812335640192, 0.0012402579886838794, 0.002177457557991147, 0.002387958811596036, 0.0013699694536626339, 0.0025921978522092104, 0.0023151226341724396, 0.0017873180331662297, 0.0012778436066582799, 0.002269544405862689, 0.0028210959862917662, 0.0028047233354300261, } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -27980, -8367, 6165, -21640, 4888, -11985, 23620, -8313, 11181, -11179, 7777, 5124, -16575, -31268, 1908, 10022, };
const TfArray<16, float> quant14_scale = { 16, { 7.8669494541827589e-05, 6.1181213823147118e-05, 4.7130175516940653e-05, 4.5981931179994717e-05, 9.6482239314354956e-05, 0.0001038615228026174, 6.0932663473067805e-05, 7.5602161814458668e-05, 9.3729475338477641e-05, 0.00010419818863738328, 7.027393439784646e-05, 8.455713395960629e-05, 4.3543099309317768e-05, 8.0081605119630694e-05, 5.9742702433140948e-05, 5.2866133046336472e-05, } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 24,-7,13,5,-27,-73,21,11,0,-59,10,-14,46,-42,66,37,-53,-30,18,24,64,29,-49,23,22,48,120,45,10,96,68,-30,10,27,33,8,25,13,-8,13,127,-14,9,-5,6,-10,17,-23,26,-38,99,-27,-74,1,76,1,0,-33,1,10,3,65,-64,-2,28,16,28,19,-1,2,22,27,15,35,26,55,49,-14,29,45,2,28,19,31,-41,22,1,58,18,-15,-72,-6,2,10,80,80, 
  /* [1][0][][] */ 42,11,-29,-4,-31,-43,104,-27,-16,-52,-60,-59,-4,-40,23,-49,1,-37,-33,11,-19,-58,82,-8,32,6,32,27,-61,35,-24,0,-14,39,25,19,-15,45,-62,99,57,7,-21,-31,54,-60,7,38,-50,-14,68,-127,-33,43,109,33,36,14,-50,-14,-26,28,2,-8,58,50,75,6,-63,-94,-15,18,25,50,5,33,-36,-30,78,-16,62,-39,41,-52,-11,-54,-33,19,-17,-21,35,18,33,-18,-45,38, 
  /* [2][0][][] */ -1,13,16,0,66,51,-58,-9,-64,67,22,-33,43,-7,-22,26,21,-1,-127,-13,-3,-58,-15,-15,-47,27,-76,49,-21,-45,-34,87,-35,-37,-5,4,-55,20,-20,-52,47,17,23,25,18,70,-18,-24,-113,10,-41,34,-12,45,-12,-56,27,7,34,22,-23,-32,-18,44,17,-16,-27,-5,51,5,10,-31,19,40,4,64,-71,-14,-21,-49,13,35,76,-18,-17,-75,-9,-79,-6,-24,-16,64,9,-37,120,-56, 
  /* [3][0][][] */ 36,-51,5,-100,-12,-27,127,-3,20,116,-76,10,-45,-1,-7,49,73,36,-7,46,-46,36,36,20,-23,79,29,7,-24,16,-54,56,-8,24,43,1,-3,-44,-27,67,17,-14,8,47,68,-54,5,22,50,-38,65,-69,104,43,34,-15,24,-33,2,-37,-21,70,46,-5,-22,-27,122,-15,-24,10,-44,48,38,-43,18,-64,-1,-50,105,8,4,-64,-23,-43,-19,-33,71,62,-49,31,-37,6,-6,-79,-8,90, 
  /* [4][0][][] */ -17,44,35,38,-21,7,-8,-17,34,-34,26,-4,-6,18,0,9,-9,-38,-42,-66,15,-19,-87,24,-10,-49,-3,5,-47,127,-39,-8,-4,-24,20,-17,67,19,-38,14,29,-10,6,-21,-22,12,30,-18,12,-6,-24,-19,-62,18,76,38,15,49,-34,-6,-21,-38,-9,14,47,34,-27,6,-40,11,1,-46,-13,44,58,51,-26,-3,-34,39,2,33,20,-65,44,-47,-41,-48,-10,-34,-27,3,-2,30,35,-13, 
  /* [5][0][][] */ 8,-36,16,-2,-30,-17,-7,3,36,3,-20,-10,-39,-45,15,-35,1,-3,-60,-33,-33,8,-32,10,7,-37,47,-17,-20,35,-5,78,-15,-65,15,3,-62,-30,-64,2,-52,15,-33,41,7,7,-77,0,-19,28,64,-22,59,-77,10,3,-39,-69,6,-50,15,12,49,77,-43,-6,127,-16,-25,-18,14,27,-9,26,40,-23,16,-15,126,41,-18,-5,-21,26,39,62,-21,93,-8,-16,-8,16,-2,-17,-31,37, 
  /* [6][0][][] */ -7,-54,22,61,-54,105,-24,-97,-18,-68,-49,29,-20,7,-50,98,0,61,6,-54,-50,-67,-127,-88,-27,-49,-10,104,-77,50,-70,-14,7,72,-16,29,-5,-16,3,-40,-27,25,40,-64,28,70,-63,14,18,15,-62,-101,95,13,-14,4,32,-12,13,-22,-57,-57,30,-30,37,-64,-65,-42,-101,16,-12,-66,0,-108,21,-111,64,32,-66,-4,-13,43,19,-72,81,-44,7,-9,-54,110,-83,100,48,-18,95,-122, 
  /* [7][0][][] */ -38,17,-17,50,0,-11,27,3,-80,4,64,59,-7,-55,3,-33,-22,6,11,-25,-40,-11,-36,-31,46,56,-6,62,2,19,22,39,-39,-127,29,78,21,9,-1,-3,-49,-31,18,-93,21,54,51,77,-23,37,-39,34,-9,-25,4,-7,-8,28,-54,-13,55,-4,-19,-60,44,-48,98,6,-38,-37,76,-6,-30,-13,-49,-1,1,-43,82,-30,-31,-18,-53,-31,53,12,-72,45,15,-19,19,26,54,23,77,-20, 
  /* [8][0][][] */ -8,-61,23,17,-46,16,33,1,24,-25,40,52,2,35,-27,8,72,-20,4,-6,-12,-72,-26,1,9,-60,118,-10,-36,75,17,-34,2,7,29,30,-17,-42,-19,1,20,31,32,-66,33,-43,41,11,44,15,49,11,-26,8,-17,26,1,109,-54,-6,-9,-30,-50,-14,-71,-21,-21,21,-47,-4,24,-23,-1,-127,56,-111,-4,12,-63,6,-29,-14,-36,46,70,-54,-57,72,-38,84,5,-12,-31,38,-11,-92, 
  /* [9][0][][] */ 0,-28,-25,21,-18,10,-5,34,-21,-18,41,42,-24,24,18,-43,17,26,-4,-10,-1,15,-15,-9,-28,25,-5,12,29,2,-14,-14,-8,-8,-1,30,-39,-8,12,9,-4,-16,-6,29,8,28,-7,21,-30,-1,-2,-15,120,18,9,-32,-2,-28,29,12,-35,-6,84,32,23,25,82,2,1,11,-28,32,2,-109,-17,-127,1,-14,40,-5,12,26,17,-34,25,3,-48,-4,11,107,45,14,35,31,-13,53, 
  /* [10][0][][] */ 19,47,28,-2,-4,36,-46,-21,78,6,-40,43,23,30,24,-27,-38,-12,42,8,27,16,16,-7,33,-18,-83,46,7,68,25,-7,31,22,-18,11,30,-1,33,-1,62,-14,72,-58,-28,-11,46,45,41,-17,-5,-15,-48,8,-44,67,-3,28,14,18,-13,-22,-27,-12,18,-1,-127,-46,-42,-30,30,-10,-13,51,49,28,52,-23,-105,0,-18,44,-12,-8,14,49,-55,-109,-39,24,15,29,34,-3,15,21, 
  /* [11][0][][] */ 22,-18,29,2,-28,19,29,-7,77,-12,-22,-27,38,32,35,-1,-32,36,23,-57,4,71,21,-11,54,9,74,-8,30,-27,0,23,16,80,-93,32,44,-27,67,8,-33,20,-1,-11,-23,-2,0,8,45,-16,-29,39,-55,15,-51,90,5,13,8,-6,46,22,-23,-67,1,-21,-127,-60,19,-44,-73,39,53,27,7,22,6,57,-101,-37,-23,-6,-23,-2,-12,-8,53,66,9,-58,7,6,-20,55,78,21, 
  /* [12][0][][] */ 38,44,-32,-24,10,-19,38,33,96,-45,20,-11,-3,-10,15,4,35,-43,-45,43,13,97,2,87,-8,-50,-96,-26,67,22,68,-4,-14,-65,111,24,62,-14,2,28,46,-73,41,-6,65,-1,36,2,-67,-17,-25,100,47,-20,77,-63,9,32,-43,-51,36,81,65,-21,13,-8,31,22,121,20,-4,51,-13,-8,28,24,-48,-82,54,-93,46,-67,23,-48,41,0,-17,-127,-20,14,-55,20,11,84,10,6, 
  /* [13][0][][] */ -32,51,-53,37,74,8,-16,-8,12,72,-27,48,-66,-32,59,-39,1,28,65,4,-17,-55,-8,14,27,64,-27,40,26,39,50,-18,-15,43,11,33,39,-9,-15,-65,-11,-36,45,-6,35,60,-33,54,-42,19,-8,30,-49,-30,27,88,22,-30,-27,7,30,4,-24,-65,3,64,118,51,56,-36,-53,-18,30,62,-75,61,-3,-83,127,-55,-25,-33,41,-19,33,59,-32,-20,23,-37,10,51,37,16,79,39, 
  /* [14][0][][] */ 10,41,-24,21,-58,-61,26,52,-81,3,75,-11,-108,-13,53,-23,-20,58,-77,74,-36,-5,-121,-6,-82,2,-123,-116,24,2,9,78,-79,52,41,-50,-76,-50,-22,-62,33,-33,34,9,-18,62,-111,-2,-12,-62,90,-15,12,30,-33,-21,-98,15,7,23,31,58,-3,83,9,-67,20,-53,44,84,74,63,-63,37,11,-16,76,-6,34,38,-62,127,35,-126,70,1,-8,1,-121,-12,3,-18,-52,-30,27,75, 
  /* [15][0][][] */ 45,-7,11,34,32,-8,-42,-34,-11,26,-34,-16,62,47,-30,-15,-12,13,-64,28,3,-41,5,4,32,-23,63,30,57,-58,-54,51,45,6,-7,-76,56,60,68,26,67,42,-12,-1,-72,-86,23,-14,-30,-22,-48,20,-7,-46,-72,61,-25,24,-24,40,-10,-63,-29,26,25,29,-55,42,-2,-50,4,-18,-6,-127,-69,-108,-24,25,-103,29,46,-25,50,29,-52,-1,5,-37,64,82,7,-52,-27,-38,36,-33, 
};
const TfArray<16, float> quant15_scale = { 16, { 0.0033434533979743719, 0.0026002016384154558, 0.0020030324812978506, 0.0019542321097105742, 0.0041004950180649757, 0.004414114635437727, 0.0025896381121128798, 0.003213091753423214, 0.0039835027419030666, 0.0044284230098128319, 0.0029866422992199659, 0.0035936781205236912, 0.0018505817279219627, 0.003403468057513237, 0.0025390647351741791, 0.0022468105889856815, } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 11235, -2578, -8072, 7845, -5214, 2130, 101, 3084, 1500, -5016, 3456, -6386, 392, -3515, 513, -3752, -8, 5506, -2723, 645, 152, -784, -7601, -4174, 47, 4919, -9467, -6412, 458, 696, -4273, -3856, 14760, -1445, -1893, -1783, 854, 11402, 3297, 8702, 2627, 4143, -2611, 2054, 472, -7808, 2994, 7756, -13874, -220, -1669, 1529, 2302, -5017, -1700, 1727, 775, 3967, 934, 616, 2771, 1470, -1012, 6169, 12750, 4475, 9860, 3674, -5569, 4677, 5035, -2952, -416, -189, 79, -2456, 10856, 1858, 14766, 12587, 16720, -2206, 11348, 7240, 970, -2202, 637, -5586, 7960, 1724, -6283, -3483, 1590, 1056, 34150, -3280, };
const TfArray<96, float> quant16_scale = { 96, { 7.6216878369450569e-05, 0.00024265573301818222, 9.8618853371590376e-05, 0.00015461980365216732, 0.00015334934869315475, 0.000329899339703843, 0.00011642480967566371, 0.00011775702296290547, 0.00048623958718962967, 0.00016263830184470862, 0.00022796643315814435, 0.00017306736845057458, 0.00019147589046042413, 0.00013354304246604443, 0.00019199929374735802, 0.00020311963453423232, 0.00024650248815305531, 0.00028175881016068161, 0.00030990882078185678, 0.00029408585396595299, 0.00027283639064989984, 0.00021770750754512846, 8.4194311057217419e-05, 0.00015021806757431477, 0.0029955524951219559, 0.00021639135957229882, 0.00021712889429181814, 0.00013187158037908375, 0.00038390295230783522, 0.00023179367417469621, 0.00012439704732969403, 0.00015191000420600176, 5.8504403568804264e-05, 0.00051042181439697742, 0.0002129230706486851, 0.00017045866115950048, 0.00036137469578534365, 6.9719753810204566e-05, 0.00026653308304958045, 0.00015050364891067147, 0.00057393097085878253, 0.00011781593639170751, 0.00020075900829397142, 0.00021916911646258086, 0.00017385983665008098, 0.00019258151587564498, 0.0003097423177678138, 0.00014384493988472968, 8.3281403931323439e-05, 0.00041095167398452759, 0.0002883685810957104, 0.0002870460448320955, 0.00015029963105916977, 0.00018657720647752285, 0.0003578346804715693, 0.00028149934951215982, 0.00016485330706927925, 0.00043549705878831446, 0.00028750015189871192, 0.00025863229529932141, 0.00016910945123527199, 0.00037865471676923335, 0.00014063350681681186, 0.00020345316443126649, 0.00020047393627464771, 0.00032543393899686635, 0.00015129074745345861, 0.00014092845958657563, 0.00023247336503118277, 0.00026212070952169597, 0.00019870103278663009, 0.00024037148978095502, 0.00072394625749439001, 0.00019667718152049929, 0.00016595155466347933, 0.00021158304298296571, 0.00012049936776747927, 0.00022432055266108364, 0.0001058885536622256, 0.00015302615065593272, 6.1665181419812143e-05, 0.0001845660008257255, 0.00010556435154285282, 0.00032266063499264419, 0.00012048761709593236, 0.00027486993349157274, 0.00023241176677402109, 0.00025809361250139773, 0.00012607612006831914, 0.00022987612464930862, 0.00013948613195680082, 0.00022928840189706534, 0.00020619650604203343, 0.00017756063607521355, 6.12180883763358e-05, 0.0003005688195116818, } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -72,1,22,-15,123,59,33,-53,-1,13,-23,11,36,12,19,-56,-13,6,3,9,-31,39,41,92,8,-6,-41,-16,27,-53,111,18,27,2,33,11,14,-76,5,0,-13,-18,59,-7,-2,53,-2,-38,-13,10,15,39,-114,18,27,0,13,-17,-1,14,-7,-7,42,90,6,-51,-20,-5,19,24,0,-11,48,1,-24,4,20,45,93,-12,-108,1,-127,-11,-103,-24,-10,-20,23,-2,11,12,-11,77,-96,-1, -36,23,127,-26,-26,26,127,-80,-7,-28,-52,16,-12,-5,-127,2,1,51,2,-41,-14,127,89,127,30,26,30,75,127,33,127,-15,-28,-30,-47,-15,-23,-106,127,-127,-54,-127,23,-19,68,19,-9,-26,117,-7,39,127,-118,72,-52,13,-68,-26,-9,32,-14,-127,-127,71,-28,-17,-17,-52,9,4,-62,127,-127,-16,20,-11,-127,51,-11,-62,-99,2,21,-38,127,72,-39,8,-97,-9,36,15,15,127,-53,-42, -84,-19,3,-10,76,3,57,-71,-6,-16,-34,-18,-31,-9,-32,-37,-7,-17,-40,-27,27,48,52,50,4,-4,-18,16,1,29,40,16,20,-4,-1,77,0,-81,-62,2,-13,-3,30,-8,-14,-4,-47,-47,34,14,-10,26,18,-16,-1,-11,109,-46,12,-19,-34,-31,-62,-114,16,-53,84,-27,24,4,-14,57,3,-25,0,43,-32,104,-52,-87,-121,13,-112,9,53,4,-17,-40,-80,-63,12,56,3,21,-120,14, 
  /* [0][1][][] */ -48,8,15,-77,75,87,-57,-46,-5,8,-33,14,4,49,39,96,-27,6,65,40,29,-17,127,8,25,-11,39,1,-23,-46,58,5,-58,-3,57,-24,-17,-127,-47,-108,-18,-1,127,-27,-69,127,-70,-108,104,65,8,-33,-127,106,76,2,4,-32,31,3,-14,9,106,-95,-65,4,-18,-36,14,-29,-71,-12,101,127,-13,-53,-65,-127,-74,-99,-59,8,-8,-77,-15,19,-59,40,-121,127,44,-85,127,-15,-81,-12, 97,127,106,117,-127,-127,71,-101,127,127,-86,-41,-38,127,-45,127,127,-127,127,127,127,-67,93,-83,-127,-127,127,127,-85,127,1,127,-127,127,127,-112,118,101,15,-5,127,-3,-98,-80,127,22,127,93,127,-127,127,-94,82,127,-127,127,-127,127,-127,127,-127,94,67,-58,117,127,-18,127,-76,-127,-10,-127,17,88,127,65,-8,-110,115,-127,51,127,107,127,94,72,-29,127,-127,41,-54,-22,-108,-41,-127,-2, -127,-8,11,-21,26,40,-52,-33,-44,23,-10,127,-72,40,8,59,-21,20,15,23,-22,-47,103,-16,33,1,42,-1,-39,-29,59,10,-100,-25,80,127,15,-72,-91,-10,-25,-43,35,-18,-28,-38,-34,-127,81,75,-19,-43,92,-5,100,-41,103,-28,45,-40,-27,-19,-122,-116,-74,-25,-45,-65,13,-30,-127,16,87,-56,-29,127,-60,-62,-52,-55,-127,-7,-88,-79,13,45,22,55,117,-79,127,127,-78,-34,-117,-7, 
  /* [0][2][][] */ -18,-15,7,-68,81,-34,-42,-21,-10,23,39,19,127,2,-29,-49,-3,-36,-50,-32,-48,-35,-31,-27,-9,24,26,31,-27,-46,-37,36,-38,6,-22,-21,-28,-42,-58,-12,-28,5,15,35,-10,34,-68,-29,31,18,-38,-20,2,-25,48,-8,5,-22,9,-13,-35,15,62,-96,-87,-41,127,48,52,-4,26,6,22,23,-65,-21,-13,45,-65,-3,-47,35,-116,-37,-82,18,57,-26,110,-4,-9,-15,-17,-55,-101,10, -25,-43,56,-127,-33,-15,20,127,-56,81,127,-2,-13,8,126,13,-13,-42,-4,-74,-64,-23,56,35,5,25,61,26,-3,-20,-108,-10,-119,-24,-92,-29,-127,-70,39,93,-32,-99,-59,127,3,13,-16,-29,68,-4,-26,-22,88,9,-62,-47,-44,-37,38,-45,116,14,81,-47,-127,-48,-14,-10,127,4,10,40,37,-16,-4,3,-16,17,14,82,-110,10,-97,-39,15,-127,14,26,-66,-15,61,-13,-2,-98,-71,127, -67,21,-100,-25,68,-57,-48,1,-30,26,12,50,47,9,-8,-94,-4,-20,-58,-63,-31,-13,20,11,-1,-15,3,13,-3,-13,-101,36,7,8,-14,6,-2,-94,-36,-16,-36,15,-18,37,-2,19,-5,-13,-9,-33,-39,-48,36,-58,42,-13,60,-10,7,-22,-30,9,-44,-127,-43,-31,-34,49,35,-25,23,36,-66,-8,-48,29,-9,46,127,28,-67,10,-58,-15,-24,-16,127,27,100,-6,31,2,-20,2,-30,13, 
};
const TfArray<96, float> quant17_scale = { 96, { 0.0032392172142863274, 0.010312868282198906, 0.0041913012973964214, 0.0065713417716324329, 0.006517347414046526, 0.014020721428096294, 0.0049480544403195381, 0.0050046732649207115, 0.020665181800723076, 0.0069121276028454304, 0.009688572958111763, 0.0073553631082177162, 0.008137725293636322, 0.0056755789555609226, 0.0081599699333310127, 0.0086325844749808311, 0.010476355440914631, 0.011974749155342579, 0.013171124272048473, 0.012498648837208748, 0.011595546267926693, 0.009252568706870079, 0.0035782582126557827, 0.0063842679373919964, 0.12731097638607025, 0.0091966325417160988, 0.0092279780656099319, 0.005604542326182127, 0.016315875574946404, 0.0098512312397360802, 0.0052868747152388096, 0.0064561748877167702, 0.0024864370934665203, 0.021692926064133644, 0.0090492302551865578, 0.007244492881000042, 0.015358423814177513, 0.0029630896169692278, 0.011327655985951424, 0.0063964049331843853, 0.024392066523432732, 0.0050071771256625652, 0.0085322577506303787, 0.0093146869912743568, 0.0073890429921448231, 0.0081847142428159714, 0.013164048083126545, 0.0061134099960327148, 0.0035394595470279455, 0.017465446144342422, 0.01225566491484642, 0.012199456803500652, 0.0063877343200147152, 0.0079295309260487556, 0.015207973308861256, 0.011963722296059132, 0.0070062656886875629, 0.018508624285459518, 0.012218755669891834, 0.010991872288286686, 0.0071871513500809669, 0.016092825680971146, 0.0059769242070615292, 0.0086467592045664787, 0.008520142175257206, 0.0138309421017766, 0.0064298566430807114, 0.0059894593432545662, 0.0098801180720329285, 0.011140130460262299, 0.0084447935223579407, 0.010215788148343563, 0.030767716467380524, 0.0083587802946567535, 0.0070529407821595669, 0.0089922789484262466, 0.0051212231628596783, 0.0095336232334375381, 0.0045002633705735207, 0.0065036113373935223, 0.0026207701303064823, 0.0078440550714731216, 0.004486484918743372, 0.013713076710700989, 0.0051207235082983971, 0.011681972071528435, 0.0098775001242756844, 0.010968978516757488, 0.0053582349792122841, 0.0097697349265217781, 0.00592816062271595, 0.009744756855070591, 0.0087633514776825905, 0.0075463270768523216, 0.0026017685886472464, 0.012774174101650715, } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 2168, 5224, 1349, 1588, 6338, 5870, -73, 1769, 18582, -1104, 14532, 3444, 782, 1515, 3395, 371, 1770, 7396, -470, 8443, 2291, 6387, -1185, 1914, -10617, 3483, 2152, 1380, 8924, 549, 7753, 4656, 2274, 16139, 2897, 6049, 4344, 2551, 4580, 2217, 11674, 1645, 1071, 252, 1858, 9610, 6697, 12877, 1411, -1011, 2029, 6593, 2433, -2407, 9275, -153, 2830, 23898, -4, 1183, 2077, 12521, 3363, -1350, 22218, 11758, 1648, 5002, 3661, 7325, 2282, 1053, -5948, 4143, 1461, 6441, 930, 18701, 3564, 7552, 2921, -114, 2152, 11344, 12, 3889, 4196, 1707, -1342, 2882, 1875, 15742, 4553, 4204, 5203, 2072, };
const TfArray<96, float> quant18_scale = { 96, { 0.00016771300579421222, 0.00013425982615444809, 0.0001750636292854324, 0.00023789356055203825, 0.00012641014473047107, 0.00012146200606366619, 0.00027507756021805108, 0.00014563099830411375, 5.2261286327848211e-05, 0.00018502888269722462, 6.0934275097679347e-05, 0.00011706602526828647, 0.00031565269455313683, 0.00030373787740245461, 0.00017941072292160243, 0.00018577282025944442, 0.00034262271947227418, 0.00011070135224144906, 0.00012351410987321287, 0.00010570589074632153, 0.0001772754912963137, 0.00012628077820409089, 0.00016583282558713108, 0.00014115252997726202, 7.4072035204153508e-05, 0.00013172367471270263, 0.00019889928807970136, 0.00025281758280470967, 9.729906014399603e-05, 0.00023898296058177948, 7.5927098805550486e-05, 0.00012778742529917508, 0.00017691784887574613, 5.9859241446247324e-05, 0.00018346674914937466, 0.00010620755347190425, 0.00015060837904457003, 0.00014966803428251296, 0.00011092550994362682, 0.00018164287030231208, 8.5435953224077821e-05, 0.00014238723088055849, 0.00030407262966036797, 0.00023002501984592527, 0.0001662130089243874, 8.4726394561585039e-05, 0.00010936537000816315, 6.6213950049132109e-05, 0.00021600385662168264, 0.00031868446967564523, 0.00023519898240920156, 0.00012562441406771541, 0.00019132114539388567, 0.00013923559163231403, 9.0332359832245857e-05, 0.00038298944127745926, 0.0001445243542548269, 4.2823947296710685e-05, 0.00038316138670779765, 0.00013086845865473151, 0.0001720076979836449, 8.023628470255062e-05, 0.00016941565263550729, 0.00020570159540511668, 4.8831632739165798e-05, 8.95346311153844e-05, 0.00023419599165208638, 0.00010777909483294934, 0.0001877988688647747, 8.6934924183879048e-05, 0.00017183690215460956, 0.00021579410531558096, 0.00010865880904020742, 0.00013875252625439316, 0.0001622700656298548, 0.00010409237438580021, 0.00021697967895306647, 4.9459311412647367e-05, 0.00015958219591993839, 0.00010574088810244575, 0.00013439584290608764, 0.00032510986784473062, 0.00020836695330217481, 8.1353347923140973e-05, 9.7363110398873687e-05, 0.00016882312775123864, 0.0001222230785060674, 0.00023315775615628809, 0.00020401463552843779, 0.0002289632975589484, 0.00018459079728927463, 5.7713761634659022e-05, 0.0001240549172507599, 0.00012310623424127698, 0.0001230785419465974, 0.00021039655257482082, } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 55,2,2,82,-127,-29,79,67,24,82,13,66,1,9,20,63, 
  /* [1][0][][] */ 2,53,-103,-17,105,127,38,1,-18,-4,-32,33,-27,90,-60,-27, 
  /* [2][0][][] */ -72,81,104,77,79,108,-17,105,65,-15,54,28,80,-127,8,-4, 
  /* [3][0][][] */ 127,21,7,18,52,83,-21,31,47,50,-28,13,-76,50,-53,52, 
  /* [4][0][][] */ -41,-29,-22,49,-89,-15,-38,-28,-48,9,-19,-46,8,61,-39,127, 
  /* [5][0][][] */ -70,21,73,55,127,2,-19,27,-38,28,-33,22,-75,33,-57,-47, 
  /* [6][0][][] */ -127,41,-22,14,-21,-46,103,-1,6,-55,-71,72,21,30,-48,22, 
  /* [7][0][][] */ 11,76,35,-74,107,77,127,47,26,29,-4,86,105,56,-76,6, 
  /* [8][0][][] */ -65,-34,-51,104,-35,106,-35,-26,13,-38,83,56,127,73,-46,35, 
  /* [9][0][][] */ -41,-127,-30,86,-60,-60,-12,51,18,16,26,40,-81,30,5,12, 
  /* [10][0][][] */ -54,-19,-105,41,-51,127,19,-36,-1,-23,31,-3,24,100,-56,75, 
  /* [11][0][][] */ -35,-127,-26,13,16,75,24,21,-65,4,-8,-79,65,83,-88,102, 
  /* [12][0][][] */ 22,-84,-112,48,-123,-127,55,4,66,44,-29,52,-13,-56,-19,-26, 
  /* [13][0][][] */ -73,-26,-35,1,-20,2,12,21,-31,127,1,-21,26,29,27,-10, 
  /* [14][0][][] */ -107,-36,-34,-34,20,61,-30,-43,58,-45,69,14,90,2,-127,-49, 
  /* [15][0][][] */ -6,-127,67,-53,-70,-45,-11,52,4,-44,-84,-58,75,-28,-17,-40, 
  /* [16][0][][] */ -8,-34,-5,-38,12,28,-5,-45,64,-127,38,-37,7,7,-53,-60, 
  /* [17][0][][] */ -90,-29,78,19,27,-15,-77,24,41,-71,-1,55,85,-127,-19,-95, 
  /* [18][0][][] */ 77,75,-71,-127,52,-21,127,-117,11,95,17,62,16,77,-40,-69, 
  /* [19][0][][] */ -52,-37,-12,-90,-112,10,-23,10,3,9,-19,-127,2,-24,-15,-61, 
  /* [20][0][][] */ 24,50,125,-80,75,-27,-35,62,-127,-107,2,-89,-2,88,-50,-20, 
  /* [21][0][][] */ -34,-96,-29,-9,77,0,43,29,-49,-71,-72,-24,127,-63,-3,29, 
  /* [22][0][][] */ 2,-9,90,52,-43,27,111,89,-3,66,23,-1,37,68,127,30, 
  /* [23][0][][] */ -127,-34,-22,16,37,33,37,-10,-46,0,-23,-94,49,85,42,119, 
  /* [24][0][][] */ 52,12,14,1,41,-68,49,-79,43,127,-88,61,-1,-73,47,-83, 
  /* [25][0][][] */ 71,-113,85,127,12,9,-52,57,-110,51,51,-33,-20,53,67,30, 
  /* [26][0][][] */ -17,28,25,59,-51,93,-12,33,-40,-27,-83,37,4,11,50,-127, 
  /* [27][0][][] */ 31,-8,-3,-52,-79,-4,-73,16,-120,-34,-100,-38,-47,54,-58,127, 
  /* [28][0][][] */ -55,60,-26,-15,74,14,-127,-38,23,-25,8,-3,-5,-52,-97,-14, 
  /* [29][0][][] */ -12,-95,-31,67,-42,22,127,6,32,35,-80,77,17,-14,-47,59, 
  /* [30][0][][] */ -39,-48,-76,0,-107,28,118,0,15,-46,21,-50,4,86,-9,127, 
  /* [31][0][][] */ -127,-61,6,100,-32,-21,-83,1,-8,-42,26,-5,-68,-37,18,77, 
  /* [32][0][][] */ -111,-127,-62,28,-87,-72,-5,-4,89,58,-49,8,62,85,44,-26, 
  /* [33][0][][] */ -16,3,-71,41,-112,-56,48,11,-127,40,-65,-85,-32,105,74,98, 
  /* [34][0][][] */ 40,32,-2,9,-74,-81,12,24,32,-127,-18,49,-53,10,51,25, 
  /* [35][0][][] */ 10,-29,-49,2,-127,17,86,7,27,3,-14,15,20,91,61,52, 
  /* [36][0][][] */ 12,21,-38,60,127,-79,21,83,-43,42,-97,-52,10,-38,-23,-15, 
  /* [37][0][][] */ -106,41,11,-33,16,-127,-48,-28,-3,-10,-49,44,44,-65,25,-66, 
  /* [38][0][][] */ 9,96,57,-55,-43,10,-127,-66,22,-34,29,39,-89,-110,55,-34, 
  /* [39][0][][] */ 11,-9,-23,62,35,71,43,-68,-41,40,8,-39,-19,75,43,127, 
  /* [40][0][][] */ 127,-28,38,47,-50,-46,-9,25,-94,51,-28,-31,29,-39,90,-2, 
  /* [41][0][][] */ -23,-4,20,75,-118,127,26,99,-43,17,-82,33,18,68,83,-123, 
  /* [42][0][][] */ 14,-45,-3,1,127,-8,36,-21,-1,-51,-75,-7,-8,2,-15,42, 
  /* [43][0][][] */ 8,-37,-48,-1,127,38,-10,18,-12,-6,-88,-30,72,-17,-63,40, 
  /* [44][0][][] */ -10,-67,-17,-45,3,24,50,19,-31,-127,-58,93,-4,54,15,95, 
  /* [45][0][][] */ 16,8,-127,-39,-59,126,-13,-61,94,-39,56,-41,-15,18,-64,64, 
  /* [46][0][][] */ 35,-46,-7,-4,127,-31,-46,77,24,11,11,82,-68,-83,41,-123, 
  /* [47][0][][] */ -99,-47,-40,91,-21,27,48,19,-40,70,56,45,-35,89,15,127, 
  /* [48][0][][] */ 46,-11,-54,-80,28,-84,-13,50,41,-59,-14,23,-47,1,-28,-127, 
  /* [49][0][][] */ 31,2,23,8,-25,-28,19,32,-54,127,-59,16,-32,-23,103,91, 
  /* [50][0][][] */ -12,-4,11,10,-127,-22,-12,-20,46,-16,22,53,-41,-39,19,-7, 
  /* [51][0][][] */ 30,7,-1,-127,27,99,34,-116,56,28,23,-94,13,52,-62,23, 
  /* [52][0][][] */ 23,-27,-24,-52,41,-109,-33,-37,29,9,127,-37,-11,15,12,110, 
  /* [53][0][][] */ -39,-69,48,-22,-56,-124,44,-94,-10,36,-127,81,-8,25,14,-83, 
  /* [54][0][][] */ 16,46,56,-1,-93,-4,-127,-62,16,-5,86,58,-105,-62,111,32, 
  /* [55][0][][] */ 26,3,-6,64,-25,34,46,-28,3,127,41,57,-15,-36,20,30, 
  /* [56][0][][] */ -6,-69,-43,40,-17,58,-20,25,127,9,36,44,-44,-8,51,72, 
  /* [57][0][][] */ 33,3,119,-14,127,2,-40,16,82,2,-21,93,40,-118,66,-64, 
  /* [58][0][][] */ 73,-27,-8,-84,19,40,36,127,26,52,-32,32,45,19,45,14, 
  /* [59][0][][] */ -30,60,63,-70,11,-49,-14,5,36,14,-127,-84,-103,-78,76,-34, 
  /* [60][0][][] */ 58,-93,92,127,9,-14,-7,-33,50,104,-20,68,18,-31,-13,-79, 
  /* [61][0][][] */ 80,105,-25,-35,-36,-114,0,-63,-54,-49,31,-10,-127,-58,47,94, 
  /* [62][0][][] */ -31,78,-36,41,-39,127,-25,40,-76,6,-26,11,-67,41,63,-64, 
  /* [63][0][][] */ 60,27,-32,-127,-11,-32,87,-40,15,-81,-71,65,13,48,15,-66, 
  /* [64][0][][] */ -18,21,5,-15,35,-71,39,64,-127,-27,-37,-68,-30,49,61,84, 
  /* [65][0][][] */ -35,-18,-32,-21,55,0,-35,-65,-127,-23,13,-6,-48,47,-25,41, 
  /* [66][0][][] */ -17,56,-7,30,-26,127,-56,16,-74,36,-25,46,-49,44,52,-88, 
  /* [67][0][][] */ 37,3,-23,-36,17,-79,83,-111,6,51,-18,106,-26,-68,-52,-127, 
  /* [68][0][][] */ 40,-67,8,127,44,16,-3,62,42,42,81,59,-82,17,-26,-31, 
  /* [69][0][][] */ 3,87,88,-74,58,-2,-28,61,60,54,-17,68,63,-72,-40,-127, 
  /* [70][0][][] */ 33,28,26,-35,81,9,-92,-46,-127,-85,-15,10,-23,35,-111,-9, 
  /* [71][0][][] */ 2,-58,41,-7,55,-2,24,19,-35,51,-127,-17,57,51,-24,19, 
  /* [72][0][][] */ 8,31,30,6,-32,-39,-94,-69,-17,65,-67,9,62,73,-127,-23, 
  /* [73][0][][] */ 4,-22,-29,-47,32,-120,60,-54,66,65,127,0,20,-10,-98,125, 
  /* [74][0][][] */ -5,-7,-25,88,-35,-4,92,56,25,49,17,118,127,57,-63,20, 
  /* [75][0][][] */ -60,62,-37,37,-127,123,-23,112,-50,24,-92,51,-70,66,56,-103, 
  /* [76][0][][] */ -83,112,-79,10,-127,45,-19,19,61,53,-58,-88,1,-107,-98,25, 
  /* [77][0][][] */ 118,84,-102,127,73,43,85,73,48,0,90,59,88,51,13,20, 
  /* [78][0][][] */ 6,-33,-20,-76,34,-103,38,-29,44,16,110,-42,15,-19,-45,127, 
  /* [79][0][][] */ -32,60,-9,3,20,-22,8,-29,-116,8,25,-11,127,31,-98,-48, 
  /* [80][0][][] */ -88,31,127,116,61,11,-8,-70,-95,35,-117,-63,26,-121,65,87, 
  /* [81][0][][] */ 96,73,-20,-20,43,-25,42,73,-87,127,-55,-47,-54,-15,112,93, 
  /* [82][0][][] */ 69,127,-21,-34,-35,-58,110,-47,-30,0,-9,57,79,4,41,1, 
  /* [83][0][][] */ -35,-41,50,47,50,52,-50,-81,75,-14,61,30,37,-79,-67,-127, 
  /* [84][0][][] */ -107,-124,-38,29,-12,56,74,21,51,31,127,106,58,104,-46,63, 
  /* [85][0][][] */ 97,2,86,-100,41,-33,-34,65,9,118,-29,37,-15,67,127,31, 
  /* [86][0][][] */ -44,116,-38,8,76,111,-38,11,127,105,127,31,-64,42,-2,-40, 
  /* [87][0][][] */ 12,-49,32,-33,51,-127,11,-25,44,-7,67,-24,31,-45,-42,64, 
  /* [88][0][][] */ -90,26,54,16,97,-29,27,19,-81,-76,93,-57,81,99,99,-127, 
  /* [89][0][][] */ -25,22,8,10,-32,127,-14,28,-46,-1,-56,6,-9,48,18,-58, 
  /* [90][0][][] */ 34,-106,22,-14,127,5,3,29,-41,-106,-122,-69,-55,-56,-16,57, 
  /* [91][0][][] */ 34,61,-16,-31,13,-98,-127,35,-40,25,-81,-123,-88,-86,-6,10, 
  /* [92][0][][] */ 64,55,83,50,-113,-127,0,-6,-11,42,-40,-37,-45,-76,69,-6, 
  /* [93][0][][] */ 10,-72,-127,35,-37,-38,12,99,48,18,51,77,-34,64,-27,23, 
  /* [94][0][][] */ 120,41,110,-36,43,-28,18,11,55,127,39,92,-12,-9,126,-20, 
  /* [95][0][][] */ -17,-21,-29,-16,127,13,34,25,-27,-8,-69,5,30,40,-80,18, 
};
const TfArray<96, float> quant19_scale = { 96, { 0.0027916945982724428, 0.0022348440252244473, 0.0029140505939722061, 0.0039598965086042881, 0.0021041808649897575, 0.0020218158606439829, 0.004578848835080862, 0.0024241248611360788, 0.000869923853315413, 0.0030799289233982563, 0.0010142915416508913, 0.0019486418459564447, 0.0052542490884661674, 0.0050559192895889282, 0.002986410865560174, 0.003092312254011631, 0.0057031828910112381, 0.0018426976166665554, 0.0020559744443744421, 0.0017595448298379779, 0.0029508685693144798, 0.0021020276471972466, 0.0027603977359831333, 0.0023495778441429138, 0.0012329783057793975, 0.0021926281042397022, 0.0033108110073953867, 0.0042083170264959335, 0.0016196075594052672, 0.0039780302904546261, 0.0012638571206480265, 0.0021271067671477795, 0.002944915322586894, 0.00099639687687158585, 0.0030539261642843485, 0.0017678954172879457, 0.0025069767143577337, 0.0024913239758461714, 0.0018464289605617523, 0.0030235664453357458, 0.0014221383025869727, 0.0023701302707195282, 0.0050614913925528526, 0.003828919492661953, 0.0027667260728776455, 0.0014103271532803774, 0.0018204593798145652, 0.0011021752143278718, 0.0035955279599875212, 0.0053047151304781437, 0.0039150435477495193, 0.0020911020692437887, 0.0031846677884459496, 0.0023176691029220819, 0.0015036421827971935, 0.0063751139678061008, 0.0024057039991021156, 0.00071283307624980807, 0.0063779763877391815, 0.002178392605856061, 0.0028631824534386396, 0.0013355863047763705, 0.0028200361412018538, 0.0034240398090332747, 0.00081283500185236335, 0.0014903635019436479, 0.003898348193615675, 0.0017940547550097108, 0.0031260370742529631, 0.0014470895985141397, 0.0028603395912796259, 0.0035920364316552877, 0.0018086981726810336, 0.0023096280638128519, 0.0027010932099074125, 0.0017326868837699294, 0.0036117711570113897, 0.00082328316057100892, 0.002656351774930954, 0.0017601274885237217, 0.0022371083032339811, 0.0054116700775921345, 0.0034684066195040941, 0.0013541806256398559, 0.0016206736909225583, 0.0028101732023060322, 0.0020344844087958336, 0.0038810658734291792, 0.0033959592692553997, 0.003811246482655406, 0.0030726366676390171, 0.00096068397397175431, 0.0020649766083806753, 0.0020491851028054953, 0.0020487243309617043, 0.0035021905787289143, } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -4215, 11630, -12578, -414, 10695, -16813, -39244, -11875, -13925, 4599, -13324, -13190, 4427, -10761, -4861, -2882, };
const TfArray<16, float> quant20_scale = { 16, { 0.00015720182273071259, 0.00015378557145595551, 9.2931331892032176e-05, 0.00013564975233748555, 0.0001007979954010807, 9.1457317466847599e-05, 6.7471235524863005e-05, 0.00015454513777513057, 0.00010806849604705349, 8.1493271864019334e-05, 0.00017349106201436371, 0.00012394579243846238, 0.00014484007260762155, 7.0111113018356264e-05, 0.00012487504864111543, 0.00010900942288571969, } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 29,41,25,-37,71,69,-45,58,-13,108,5,67,-30,43,-16,34,19,91,32,-69,-91,84,-22,47,75,60,38,38,-55,-33,19,87,-25,10,-92,57,57,-127,-37,28,20,-26,74,3,0,-51,-67,2, 
  /* [1][0][][] */ -59,4,-80,-47,13,98,-52,3,-11,-35,-62,31,78,-22,-13,-12,-55,-45,-16,9,-81,54,-123,-61,-48,-31,51,48,-30,-30,23,-28,22,-70,-50,70,21,-68,127,-19,0,54,-40,-12,39,61,21,32, 
  /* [2][0][][] */ 5,-17,45,-36,-45,-75,14,38,115,66,-75,-1,90,-41,127,83,-75,-39,-21,39,100,-88,-20,-74,12,-48,44,-97,40,29,-42,8,24,-20,73,24,-75,-5,-15,-24,24,5,47,-25,25,-97,89,-57, 
  /* [3][0][][] */ 27,2,-30,-15,13,120,25,-15,33,-49,53,-4,-51,17,-12,36,-25,-60,28,-127,-3,-12,-3,2,-47,92,124,51,3,-41,37,58,55,-32,99,21,-35,-47,16,55,36,23,-5,-16,-1,33,-13,-33, 
  /* [4][0][][] */ 91,1,23,-36,101,84,42,2,76,-24,-115,28,61,-39,20,-7,-114,-112,-4,-90,-34,25,-49,-30,-58,107,-84,127,-68,-62,39,86,50,-64,17,12,17,2,-23,51,-36,-26,-2,64,-18,90,-35,-23, 
  /* [5][0][][] */ 1,5,-84,-3,-26,88,22,-37,67,55,53,106,55,-16,43,4,-54,127,-31,37,25,-17,-48,-19,18,-19,-83,-43,-5,38,25,-15,-49,-8,52,9,-55,16,-103,3,109,-14,22,51,-44,11,-35,36, 
  /* [6][0][][] */ 41,9,-2,87,1,3,112,-27,7,55,127,89,43,52,-49,40,61,-11,-70,54,50,-68,-13,59,-82,76,79,-9,116,19,3,23,68,-47,-87,-8,69,22,19,-8,42,73,49,-32,78,120,44,-16, 
  /* [7][0][][] */ -79,2,-27,26,-48,-21,23,49,73,82,-41,-38,-78,3,-6,-11,-64,97,20,99,-49,24,28,34,-25,-94,-25,-81,31,33,-1,7,-22,9,17,-17,14,-46,127,11,26,52,14,-8,47,60,-25,-8, 
  /* [8][0][][] */ -29,-93,57,-41,66,-42,73,-59,-34,-85,28,-2,-39,-2,32,15,-4,23,-53,79,4,51,-25,30,70,26,-42,-17,-127,-24,-55,-104,6,-75,9,73,1,42,113,50,39,0,80,119,14,-66,-20,83, 
  /* [9][0][][] */ 39,-29,18,-79,31,89,-42,39,5,-19,-30,-6,31,-45,103,-20,-4,-115,31,59,-89,51,53,-33,-16,-65,-39,87,42,83,-31,-31,-51,23,-12,127,-18,-44,-83,-9,-18,-14,28,103,71,82,-72,28, 
  /* [10][0][][] */ -22,12,-21,-4,13,10,-54,-45,42,55,56,-19,-51,-5,49,-56,-60,127,8,41,8,-5,12,23,-58,47,-9,100,18,11,-36,-12,53,9,-2,21,-22,-30,-38,16,-101,-15,30,-11,14,32,23,18, 
  /* [11][0][][] */ -20,47,-22,47,32,71,-2,3,22,-2,-127,-68,96,12,-9,-48,-1,29,-59,-54,-10,-2,94,1,56,7,-12,4,32,32,7,47,39,-13,-53,-7,63,95,106,18,54,-28,61,10,-66,-12,76,-1, 
  /* [12][0][][] */ -66,-9,24,35,-42,-44,17,2,-26,-29,-105,8,52,-63,19,14,32,89,72,-127,-25,33,-34,-65,-1,-4,21,-29,4,18,-8,88,50,72,28,-27,-57,-12,31,4,4,32,55,1,43,16,-38,-35, 
  /* [13][0][][] */ -65,-100,-60,-79,14,38,66,39,-109,21,127,-36,60,41,101,-1,125,38,10,-123,78,-78,112,1,-92,2,-39,17,-2,-73,-91,49,29,-7,-69,59,34,-45,103,-89,6,48,64,42,70,-8,86,-78, 
  /* [14][0][][] */ 61,21,-67,-14,-65,25,-91,-30,-32,53,60,38,-17,-43,25,-48,41,-105,20,21,78,-66,49,12,-16,127,-83,-9,-70,-27,-91,-15,114,36,93,-19,-84,7,-27,69,-19,-39,92,-22,-58,-48,-33,57, 
  /* [15][0][][] */ -73,4,40,17,92,-4,7,41,15,89,-10,57,50,4,-45,-27,24,52,17,-48,13,-37,-47,-48,44,-57,-57,77,-38,7,23,6,-83,1,127,-3,-97,22,61,-14,-52,-43,18,10,-33,-23,-20,5, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0066810771822929382, 0.006535886786878109, 0.0039495816454291344, 0.0057651144452393055, 0.0042839148081839085, 0.0038869359996169806, 0.0028675273060798645, 0.0065681682899594307, 0.0045929108746349812, 0.0034634638577699661, 0.0073733697645366192, 0.005267695989459753, 0.0061557027511298656, 0.0029797223396599293, 0.0053071891888976097, 0.0046329004690051079, } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 13518, 2130, 14823, 1544, 17857, -1560, 40687, 390, 8219, 34745, 4630, 20915, -1277, 8070, 37196, 24426, 242, 438, 9484, 32752, 197, 13185, 1688, 10926, 16820, 30758, -278, -4956, -4337, 16047, 15678, -382, -771, -1216, 3024, 14881, 5584, 30967, 4583, 13053, 20394, -5297, 976, 12572, -1823, 2134, 36492, 24995, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 6.1607664974872023e-05, 6.5058302425313741e-05, 7.3572184192016721e-05, 0.00010401826148154214, 8.7473796156700701e-05, 9.0852328867185861e-05, 5.5718450312269852e-05, 0.00031633442267775536, 9.7021416877396405e-05, 5.7393994211452082e-05, 6.1943661421537399e-05, 0.00010470547567820176, 8.6359446868300438e-05, 9.3975148047320545e-05, 4.0934221033239737e-05, 6.6931832407135516e-05, 0.0001646895834710449, 6.8031440605409443e-05, 0.00011738132161553949, 7.6517389970831573e-05, 0.00010374469275120646, 8.9847388153430074e-05, 8.0277197412215173e-05, 0.00012817622337024659, 6.5466956584714353e-05, 7.2811439167708158e-05, 5.998912820359692e-05, 7.2725219069980085e-05, 0.0002198573638452217, 7.3439434345345944e-05, 7.4687079177238047e-05, 0.00044208928011357784, 6.7538072471506894e-05, 0.00016786485502962023, 0.00011894561612280086, 5.4342672228813171e-05, 0.00015789167082402855, 4.9822236178442836e-05, 8.8200344180222601e-05, 0.00019015106954611838, 0.00010860464681172743, 0.00020572617358993739, 0.00063580530695617199, 7.9442943388130516e-05, 0.00019062115461565554, 6.335225043585524e-05, 4.5726574171567336e-05, 5.9614994825096801e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -101,28,-127,109,-85,85,-14,60,-32,-60,50,10,96,-50,-120,-82,45,90,24,-101,89,-11,89,-59,-75,-28,80,46,-106,-48,-58,90,75,-103,84,-55,-26,-108,85,-3,-71,-50,82,-93,80,43,-91,-127, -127,92,-58,104,-127,73,-63,46,-110,-87,89,-36,74,-19,-16,-65,65,88,88,-127,63,-30,70,-70,-117,-65,56,111,65,-31,-127,41,115,-127,73,-83,-38,-91,56,-82,-60,72,124,-62,-38,71,-44,-57, -70,44,-10,28,-57,69,5,67,-28,-49,19,-26,86,-21,14,-31,45,64,8,-61,48,20,15,-56,-127,-16,5,24,119,-28,-39,-8,57,-90,36,-43,-4,-53,45,-50,-78,-23,64,-13,-46,62,14,-14, 
  /* [0][1][][] */ -69,57,-59,79,-22,107,-127,96,-120,-79,127,-81,59,-103,-67,-127,92,51,-60,-72,63,-109,76,-36,-73,-68,127,46,-127,-47,-54,127,123,74,88,-123,-62,-127,66,-34,-59,-66,23,-127,127,107,-127,-24, -121,127,-39,113,-97,127,-118,127,-127,-127,115,-127,127,-127,-127,-106,127,127,-55,-29,127,-127,127,-127,-100,-127,84,127,-1,-127,-96,120,127,36,127,-60,-127,-26,127,-127,-62,127,127,-44,-17,127,-37,-50, -29,25,-64,127,-110,39,-66,-13,-73,-26,65,-47,77,-26,-86,-5,74,51,-72,-8,41,-70,72,-70,-103,-39,89,68,86,-28,-18,-20,60,-5,42,-111,-12,19,63,-9,-55,-20,19,-29,-82,68,-41,-86, 
  /* [0][2][][] */ -38,70,29,125,31,51,-111,41,-53,-44,52,-91,0,-54,14,-82,85,27,-77,-32,48,-86,104,-6,-22,-35,72,29,-116,-22,-28,18,54,94,60,-65,10,-29,-8,-9,-127,13,18,-118,74,68,-57,-83, -99,62,-54,111,-108,25,-92,17,-9,-26,53,-56,39,-54,13,-38,100,74,-127,-22,26,27,98,-21,-116,-41,46,54,27,-122,-58,93,8,72,62,-127,-33,-61,12,-35,8,77,6,-43,-16,76,-68,-112, -103,83,-78,86,-114,12,-88,33,-36,-18,50,-33,33,-44,15,5,35,19,-71,-4,20,-7,82,-11,-17,-8,46,24,91,-17,-45,90,28,81,20,-86,-6,9,-5,-20,17,-8,-23,-75,-45,43,-27,-102, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0026183256413787603, 0.0027649777475744486, 0.0031268177554011345, 0.0044207759201526642, 0.0037176362238824368, 0.0038612238131463528, 0.0023680340964347124, 0.013444212265312672, 0.0041234102100133896, 0.0024392446503043175, 0.0026326056104153395, 0.0044499826617538929, 0.0036702763754874468, 0.0039939437992870808, 0.0017397042829543352, 0.0028446028009057045, 0.0069993073120713234, 0.0028913361020386219, 0.0049887062050402164, 0.0032519891392439604, 0.0044091492891311646, 0.0038185140583664179, 0.0034117808099836111, 0.0054474892094731331, 0.002782345749437809, 0.0030944859609007835, 0.0025495379231870174, 0.0030908216722309589, 0.0093439379706978798, 0.0031211758032441139, 0.0031742008868604898, 0.018788794055581093, 0.0028703680727630854, 0.0071342564187943935, 0.0050551886670291424, 0.0023095635697245598, 0.0067103961482644081, 0.0021174449939280748, 0.0037485144566744566, 0.008081420324742794, 0.0046156975440680981, 0.0087433625012636185, 0.027021724730730057, 0.0033763248939067125, 0.0081013990566134453, 0.0026924705598503351, 0.00194337940774858, 0.0025336372200399637, } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 3340, -838, 592, -3629, 5615, -1286, 5940, -5684, 1398, 917, 1158, 5029, 39, -723, 311, 6302, -2756, 5094, 4652, 670, -1240, 2923, -1057, 3644, 1430, 3584, 763, -493, 7051, -51, 1654, -2091, -512, 5537, -1283, 1589, 1606, 1234, 16, 4816, 2485, 8466, -6296, 1855, 7746, -288, 2349, 1798, };
const TfArray<48, float> quant24_scale = { 48, { 0.00012746936408802867, 0.00031945947557687759, 0.00028453022241592407, 0.00015480343427043408, 0.00014551280764862895, 0.0001740068692015484, 0.00015155492292251438, 0.00010198589006904513, 0.00026827151305042207, 0.00019753912056330591, 0.00023386660905089229, 0.00015808689931873232, 0.00032698860741220415, 0.00027013913495466113, 0.00031087911338545382, 0.00013102361117489636, 0.00022161462402436882, 0.00015704034012742341, 0.00017663180187810212, 0.00029418611666187644, 0.00024717405904084444, 0.00019826175412163138, 0.00019699698896147311, 0.00021750698215328157, 0.00026638468261808157, 0.00012963556218892336, 0.00031728271278552711, 0.00030098037677817047, 0.00012221664655953646, 0.00023717412841506302, 0.00027633394347503781, 0.00016430011601187289, 0.00019010418327525258, 0.00015419587725773454, 0.0002723037323448807, 0.00027695350581780076, 0.00023342249915003777, 0.0001807675143936649, 0.00024038234550971538, 0.00017827085684984922, 0.00024205463705584407, 9.7765718237496912e-05, 0.00011178119166288525, 0.00026473376783542335, 0.00010750261571956798, 0.0002539561246521771, 0.00021159906464163214, 0.00025586120318621397, } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 97,56,127,-59,64,109,-106,-98, 
  /* [1][0][][] */ -6,-72,-127,-8,37,34,29,-1, 
  /* [2][0][][] */ -127,-15,-47,-21,31,33,-56,-48, 
  /* [3][0][][] */ 37,108,110,-89,-25,-127,-9,15, 
  /* [4][0][][] */ -127,20,-60,-43,64,13,-27,-99, 
  /* [5][0][][] */ -95,36,-55,-10,17,25,-79,-127, 
  /* [6][0][][] */ -28,-127,-86,36,86,15,7,18, 
  /* [7][0][][] */ -45,-127,-104,-53,-63,-89,11,82, 
  /* [8][0][][] */ 99,11,-20,-6,84,-71,-127,22, 
  /* [9][0][][] */ -23,55,-62,87,-65,-64,127,-46, 
  /* [10][0][][] */ -20,119,45,64,127,-21,3,50, 
  /* [11][0][][] */ -62,-58,-27,-36,-80,86,127,-5, 
  /* [12][0][][] */ 58,39,-127,30,-41,-50,-61,1, 
  /* [13][0][][] */ 27,-35,-54,8,2,-127,-12,-28, 
  /* [14][0][][] */ 42,-74,54,32,127,-82,-86,26, 
  /* [15][0][][] */ -41,-48,-7,127,72,78,-75,9, 
  /* [16][0][][] */ 127,19,-25,33,72,-95,-109,-19, 
  /* [17][0][][] */ 55,127,46,67,39,63,7,-74, 
  /* [18][0][][] */ 9,-8,-2,-29,127,0,21,-8, 
  /* [19][0][][] */ 17,108,17,23,-127,9,17,-21, 
  /* [20][0][][] */ -61,-9,53,-127,12,21,0,124, 
  /* [21][0][][] */ -50,82,45,-127,27,53,-7,105, 
  /* [22][0][][] */ -62,-42,-80,41,-127,118,101,-20, 
  /* [23][0][][] */ 71,33,-127,13,1,-50,-70,-22, 
  /* [24][0][][] */ -15,16,-7,10,-25,72,-127,87, 
  /* [25][0][][] */ -105,-52,-127,3,-66,-78,61,101, 
  /* [26][0][][] */ 51,-7,-48,-45,103,-25,127,-39, 
  /* [27][0][][] */ 127,-83,12,114,5,21,-17,103, 
  /* [28][0][][] */ 57,68,67,32,127,-48,43,-11, 
  /* [29][0][][] */ 6,-23,-30,-57,-82,-5,127,-40, 
  /* [30][0][][] */ 14,-127,-21,-52,-69,31,-17,-48, 
  /* [31][0][][] */ 10,39,-22,-4,-127,-2,-31,12, 
  /* [32][0][][] */ 35,-62,-53,74,-31,-64,115,-127, 
  /* [33][0][][] */ 31,127,43,-11,49,-30,-28,-48, 
  /* [34][0][][] */ -127,-41,82,9,-37,97,83,-4, 
  /* [35][0][][] */ -50,85,127,-26,-70,-60,-37,49, 
  /* [36][0][][] */ -93,26,117,-9,4,127,63,10, 
  /* [37][0][][] */ -9,-71,-4,-127,-65,-95,52,26, 
  /* [38][0][][] */ 38,-6,60,-59,38,50,-127,-5, 
  /* [39][0][][] */ -9,60,-127,-16,-28,3,7,72, 
  /* [40][0][][] */ 71,-76,10,61,-5,16,12,127, 
  /* [41][0][][] */ -49,62,127,47,0,97,-80,39, 
  /* [42][0][][] */ 43,-127,-104,-8,-117,20,26,-71, 
  /* [43][0][][] */ -18,-72,20,-39,127,-36,31,50, 
  /* [44][0][][] */ 7,101,127,50,-11,64,-67,15, 
  /* [45][0][][] */ -14,52,7,76,-103,47,-127,16, 
  /* [46][0][][] */ -36,-52,63,58,-127,-120,-38,-11, 
  /* [47][0][][] */ -5,56,9,-94,-127,-4,-19,55, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0014131078496575356, 0.0035414840094745159, 0.0031542631331831217, 0.0017161297146230936, 0.0016131349839270115, 0.0019290163181722164, 0.0016801171004772186, 0.0011306016240268946, 0.0029740212485194206, 0.0021898916456848383, 0.0025926132220774889, 0.0017525297589600086, 0.0036249510012567043, 0.0029947252478450537, 0.0034463631454855204, 0.0014525097794830799, 0.0024567893706262112, 0.0017409276915714145, 0.0019581159576773643, 0.0032613067887723446, 0.0027401377446949482, 0.002197902649641037, 0.002183881588280201, 0.002411252586171031, 0.0029531039763242006, 0.0014371220022439957, 0.0035173525102436543, 0.0033366272691637278, 0.0013548769056797028, 0.0026292798575013876, 0.0030634002760052681, 0.001821408630348742, 0.0021074688993394375, 0.0017093942733481526, 0.0030187217053025961, 0.0030702685471624136, 0.0025876897852867842, 0.0020039638038724661, 0.0026648456696420908, 0.001976286293938756, 0.0026833845768123865, 0.001083817332983017, 0.0012391909258440137, 0.0029348023235797882, 0.0011917592491954565, 0.0028153227176517248, 0.0023457582574337721, 0.0028364420868456364, } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { 263, -3952, 21849, -4913, 2272, -15270, 4599, -11545, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 8.0398436693940312e-05, 9.6836469310801476e-05, 0.00010181644756812602, 7.6313983299769461e-05, 0.00010392734839115292, 0.00015063391765579581, 7.9191733675543219e-05, 8.3060585893690586e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -69,-48,-9,-58,2,15,89,45,-94,-79,-33,40,-57,-17,-63,28,-90,22,27,127,70,11,0,111,62,72,12,13,-97,-50,-73,-59,-68,94,48,-31,66,4,60,8,43,1,25,-106,47,-26,-19,-76, 
  /* [1][0][][] */ 8,60,-9,-43,-64,88,-20,-65,-18,89,-16,21,76,40,-41,0,-26,-122,92,-60,127,21,-91,38,85,10,-97,82,33,-3,57,23,-22,-12,19,-7,-3,98,-25,-2,94,63,0,12,109,33,-28,74, 
  /* [2][0][][] */ -10,-19,111,7,91,-31,-24,23,-24,10,-20,29,13,-67,-53,-120,-56,-96,-40,13,-127,17,-16,-28,-35,9,-3,-63,-34,-9,-39,-13,-1,2,37,-12,4,-48,-47,28,46,-35,20,-55,-55,-27,-59,-46, 
  /* [3][0][][] */ 38,-2,92,2,5,-38,12,63,-62,-31,30,-17,-61,77,-23,38,74,29,-40,42,-127,-47,123,2,12,9,-59,-45,-46,54,105,-53,27,-103,-19,51,-15,-79,0,67,-74,-75,57,-6,-57,-81,65,-16, 
  /* [4][0][][] */ 14,-38,78,-21,15,-31,-7,-11,-37,-4,-30,-4,57,-78,43,-86,39,46,-25,-36,16,50,12,17,4,-3,58,2,22,19,-127,-6,-19,1,-25,27,44,-5,28,-1,-20,4,-88,38,-23,-72,0,13, 
  /* [5][0][][] */ 31,-23,26,53,30,27,8,7,-54,-10,-40,7,31,12,2,-17,81,67,-1,-18,63,-66,127,-99,-19,29,1,34,21,7,-32,-36,-12,-34,-29,2,24,11,61,9,-81,29,31,28,53,2,62,0, 
  /* [6][0][][] */ -37,41,-114,82,40,-7,42,27,-14,0,54,-81,-81,-11,-36,26,-117,22,-37,74,10,30,-80,-65,1,-20,32,68,-32,-24,-37,-1,37,61,-48,-23,-14,-15,60,11,52,57,-105,-53,-41,127,-34,-16, 
  /* [7][0][][] */ 48,51,-101,40,9,35,112,75,24,60,-71,-33,-58,-19,-63,-45,32,27,95,88,53,-17,127,8,99,71,-29,69,-59,20,-23,-79,14,-64,-37,17,-30,76,-43,85,-61,15,-17,-96,44,-6,83,-20, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0034169335849583149, 0.0041155498474836349, 0.0043271989561617374, 0.0032433443702757359, 0.0044169123284518719, 0.006401941180229187, 0.003365648677572608, 0.003530074842274189, } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { 688, 5921, -441, -1641, 1624, -690, 1792, 6599, -4515, -104, -12465, -152, 5458, -771, -2982, 2010, 5031, -1634, -1009, -6553, -6866, 3862, 16283, -2844, -66, -1927, 9610, -5735, 475, 101, -4897, 8851, 4783, 129, 1267, 1694, -424, -566, 12647, 4123, 3762, -356, 4844, 14132, -4467, 13926, 1824, 4210, };
const TfArray<48, float> quant28_scale = { 48, { 0.00025721496785990894, 0.00021117184951435775, 0.00088850141037255526, 0.00027574796695262194, 0.00015554898709524423, 0.00015939270087983459, 0.00026351847918704152, 0.00028595465118996799, 9.3062008090782911e-05, 0.00029164753505028784, 0.0001339866139460355, 0.001726590096950531, 0.00033960212022066116, 0.00067223579389974475, 0.00035357809974811971, 0.00085002387640997767, 0.00029137189267203212, 6.5230306063313037e-05, 0.00025757454568520188, 0.00023889995645731688, 0.00028019963065162301, 0.00024332119210157543, 9.5826770120766014e-05, 0.00049286929424852133, 0.00018207156972493976, 0.00029579066904261708, 0.00049101660260930657, 0.00023685724590905011, 0.00022006835206411779, 0.00028770510107278824, 0.00023308854724746197, 0.0001188807946164161, 0.00013289465277921408, 0.00027047214098274708, 0.00018072914099320769, 0.00026794947916641831, 0.0013344566104933619, 0.00038399320328608155, 0.00012358711683191359, 0.00017880700761452317, 0.00021246226970106363, 0.00013207443407736719, 0.00037852762034162879, 0.00022411740792449564, 0.00025567261036485434, 5.8774974604602903e-05, 8.4528095612768084e-05, 0.00019180744129698724, } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 7,7,4,14,-19,-127,-40,47,-61,-1,34,4,27,13,-21,6,85,34,22,4,-15,-40,-82,14,-12,-8,-3,-28,-76,78,-10,-127,58,-1,-67,-51,9,-47,-10,14,3,52,17,-28,-5,47,127,-10, -127,-50,-25,127,-81,83,-97,107,23,-7,76,2,37,18,-17,-46,-49,69,33,22,5,83,12,127,127,-19,-40,7,85,-109,4,-69,76,-1,5,-127,35,5,-36,-29,-112,-29,-67,-108,32,63,64,64, -8,3,11,28,-15,14,37,4,6,-44,18,9,-50,16,-18,9,-66,18,-50,6,12,-76,127,11,-59,6,-13,5,49,37,-13,9,-9,-27,14,73,20,-1,26,64,35,-37,25,-43,6,71,-44,-47, 
  /* [0][1][][] */ -29,-10,-31,0,31,-97,127,-90,-13,1,38,39,127,35,13,-25,-26,-13,22,35,60,-62,44,2,-75,127,-87,-19,127,-96,51,-108,-33,6,-25,3,19,-53,-66,1,127,127,14,-127,-49,-48,-38,81, 109,-127,127,8,127,32,-70,-73,45,127,127,-127,-106,127,127,127,127,127,120,127,127,90,13,4,105,-89,-127,93,28,127,127,18,-127,127,127,121,-127,127,-127,-127,37,28,-127,-40,127,-127,-32,42, 10,6,-42,-6,-36,91,-119,80,127,-64,31,68,-67,35,14,-49,14,-14,-127,43,29,-127,-41,-4,51,-13,-32,127,-89,-31,-10,-32,-13,7,89,-40,54,5,-5,-121,112,-38,33,16,-33,95,88,-76, 
  /* [0][2][][] */ -4,42,3,-24,-10,-81,-5,-80,12,-6,-16,-2,-28,1,18,2,-62,33,45,-17,-2,-10,113,-10,-91,10,13,-12,1,-13,-5,41,-36,-10,-78,-13,4,-3,-5,3,-37,24,-9,-26,-10,40,-44,-8, 43,-5,-29,-15,28,11,120,-127,91,-19,6,-1,-88,-15,0,-58,-16,110,14,25,27,18,-11,-26,-75,46,58,5,-124,12,-25,-6,-29,-18,-30,-29,69,-13,-21,90,-120,-18,-26,6,64,85,-22,-127, -39,21,1,-22,4,-7,-14,-33,-41,-18,-20,7,8,1,9,21,43,39,-34,6,-6,-33,-56,-19,13,-34,11,-9,-24,-12,-35,3,38,-29,-19,-47,7,8,10,-49,-19,-54,-6,-13,-3,29,70,-37, 
};
const TfArray<48, float> quant29_scale = { 48, { 0.010931636206805706, 0.0089748036116361618, 0.037761308252811432, 0.011719288304448128, 0.0066108317114412785, 0.0067741894163191319, 0.011199534870684147, 0.012153072282671928, 0.0039551351219415665, 0.012395019643008709, 0.0056944307871162891, 0.073380075395107269, 0.014433089643716812, 0.028570020571351051, 0.015027069486677647, 0.036126013845205307, 0.012383305467665195, 0.0027722879312932491, 0.010946918278932571, 0.010153247974812984, 0.011908484622836113, 0.010341150686144829, 0.0040726377628743649, 0.020946944132447243, 0.0077380416914820671, 0.012571102939546108, 0.020868204534053802, 0.010066432878375053, 0.0093529047444462776, 0.012227466329932213, 0.0099062630906701088, 0.0050524338148534298, 0.0056480225175619125, 0.011495065875351429, 0.0076809884048998356, 0.01138785295188427, 0.056714404374361038, 0.01631971076130867, 0.0052524525672197342, 0.0075992979109287262, 0.0090296464040875435, 0.0056131635792553425, 0.016087424010038376, 0.0095249898731708527, 0.01086608599871397, 0.0024979363661259413, 0.0035924441181123257, 0.0081518162041902542, } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 3001, 4801, 16978, 1315, 1264, -1187, 7109, 16299, 5061, -273, 7241, -2854, 12029, -2945, 2109, 31221, -638, 2117, 237, 3168, 2870, 5971, 676, 11233, 6028, 2424, 15433, 1605, 8148, 3777, 754, 1191, 601, 1941, -439, 606, -3470, -397, 4290, 2979, 6477, 1034, 5123, 9496, 3598, 2315, 2012, 4842, };
const TfArray<48, float> quant30_scale = { 48, { 0.00022059753246139735, 0.00018084203475154936, 6.2841892940923572e-05, 0.00020025378034915775, 0.00030753624741919339, 0.00024269138521049172, 0.00011639112199191004, 6.0164242313476279e-05, 0.00012868022895418108, 0.00029714228003285825, 0.00012931386299896985, 0.00020222493913024664, 7.2323149652220309e-05, 0.00018252828158438206, 0.0002226640353910625, 3.6505356547422707e-05, 0.00023774508736096323, 0.00022503371292259544, 0.00031237900839187205, 0.00016446634253952652, 0.00022752898803446442, 0.00013836802099831402, 0.00036462876596488059, 9.103308548219502e-05, 0.00014148528862278908, 0.0002022259432123974, 6.9396308390423656e-05, 0.00026751271798275411, 0.00011360544885974377, 0.00020242706523276865, 0.00040756008820608258, 0.00032606491004116833, 0.00033198395976796746, 0.0001740229781717062, 0.00031934768776409328, 0.00025742370053194463, 0.00015878144768066704, 0.00030227290699258447, 0.00016767889610491693, 0.00020572706125676632, 0.00013099149509798735, 0.00033882909337989986, 0.00018180989718530327, 0.00010577564535196871, 0.00021258603374008089, 0.00030756599153392017, 0.00033898960100486875, 0.00017617305275052786, } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 53,127,-95,-61,0,46,23,60, 
  /* [1][0][][] */ 52,-57,52,-127,-49,79,-89,-41, 
  /* [2][0][][] */ -15,127,85,21,103,10,15,-1, 
  /* [3][0][][] */ 64,23,-122,73,-40,-127,-77,-49, 
  /* [4][0][][] */ -54,42,13,-71,-9,127,97,40, 
  /* [5][0][][] */ 14,122,-127,-67,88,115,2,-1, 
  /* [6][0][][] */ -35,121,87,57,55,29,14,-127, 
  /* [7][0][][] */ 127,-66,-32,-21,30,11,124,45, 
  /* [8][0][][] */ 68,126,23,127,96,76,89,-92, 
  /* [9][0][][] */ 84,80,-127,-78,-12,67,17,98, 
  /* [10][0][][] */ -45,-65,17,-64,-24,-45,-34,127, 
  /* [11][0][][] */ 7,-86,-127,-10,1,-3,35,-30, 
  /* [12][0][][] */ -26,-94,-111,6,-127,-31,-30,47, 
  /* [13][0][][] */ -13,25,-127,97,-115,-21,5,-3, 
  /* [14][0][][] */ -73,-48,-127,18,33,-17,-9,-98, 
  /* [15][0][][] */ 51,-90,-127,40,-104,-31,-25,-12, 
  /* [16][0][][] */ 127,-80,-28,73,-73,9,25,75, 
  /* [17][0][][] */ -36,101,127,-19,-60,-15,-15,-36, 
  /* [18][0][][] */ 18,-127,40,33,1,-70,32,-43, 
  /* [19][0][][] */ 127,-43,-73,32,-112,-2,35,124, 
  /* [20][0][][] */ -28,-127,89,81,2,-91,-8,-68, 
  /* [21][0][][] */ -34,-81,-28,-75,127,24,114,46, 
  /* [22][0][][] */ -127,-17,-84,22,34,29,-67,-97, 
  /* [23][0][][] */ -127,-14,52,1,-94,84,81,-11, 
  /* [24][0][][] */ -70,68,-26,-26,-56,117,127,37, 
  /* [25][0][][] */ -30,-127,-67,-58,-57,-42,-55,-31, 
  /* [26][0][][] */ 7,44,-41,127,-75,20,-27,22, 
  /* [27][0][][] */ 5,-127,23,73,20,-67,6,-99, 
  /* [28][0][][] */ 34,127,35,40,90,-24,4,-31, 
  /* [29][0][][] */ 127,30,-59,-12,49,-103,-88,5, 
  /* [30][0][][] */ 14,-5,12,-127,1,-30,29,-40, 
  /* [31][0][][] */ 75,-32,15,73,-2,27,-3,127, 
  /* [32][0][][] */ -41,-80,-5,-76,-46,127,39,57, 
  /* [33][0][][] */ -37,25,68,-40,31,127,-113,83, 
  /* [34][0][][] */ -16,127,-84,-52,6,61,-72,55, 
  /* [35][0][][] */ -6,-127,61,62,-47,-50,28,-120, 
  /* [36][0][][] */ -13,-32,-105,-13,-127,-69,-25,-19, 
  /* [37][0][][] */ -45,-127,52,63,-39,-89,-15,-24, 
  /* [38][0][][] */ -75,27,92,-91,-127,-82,-54,117, 
  /* [39][0][][] */ 18,-127,82,58,-50,-44,-26,-110, 
  /* [40][0][][] */ -31,89,34,95,-127,-51,-114,44, 
  /* [41][0][][] */ 92,113,-63,-127,40,22,18,35, 
  /* [42][0][][] */ -25,-44,-18,12,127,22,46,25, 
  /* [43][0][][] */ 127,2,73,20,-84,-46,65,97, 
  /* [44][0][][] */ 63,45,-22,8,47,-127,-127,54, 
  /* [45][0][][] */ 68,14,17,8,95,-127,-6,-24, 
  /* [46][0][][] */ 55,-31,-14,127,28,44,25,72, 
  /* [47][0][][] */ -75,-79,46,66,-57,-13,127,-42, 
};
const TfArray<48, float> quant31_scale = { 48, { 0.0031584431417286396, 0.0025892369449138641, 0.00089974969159811735, 0.0028671680483967066, 0.004403203260153532, 0.0034747757017612457, 0.0016664499416947365, 0.00086141191422939301, 0.0018424013396725059, 0.0042543858289718628, 0.0018514735857024789, 0.0028953903820365667, 0.0010354991536587477, 0.0026133800856769085, 0.003188030794262886, 0.00052267173305153847, 0.0034039563033729792, 0.0032219591084867716, 0.0044725402258336544, 0.0023547753226011992, 0.003257685573771596, 0.001981107983738184, 0.0052206353284418583, 0.0013033818686380982, 0.0020257399883121252, 0.0028954048175364733, 0.00099359359592199326, 0.0038301593158394098, 0.0016265655867755413, 0.0028982844669371843, 0.0058353119529783726, 0.0046684904955327511, 0.0047532375901937485, 0.002491604071110487, 0.0045723156072199345, 0.0036857083905488253, 0.0022733807563781738, 0.004327844362705946, 0.0024007714819163084, 0.0029455327894538641, 0.0018754933262243867, 0.0048512439243495464, 0.0026030945591628551, 0.0015144610079005361, 0.0030437372624874115, 0.0044036293402314186, 0.0048535419628024101, 0.002522388007491827, } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { 6666, 11734, -5335, 9305, -2709, 2638, -10095, -14372, };
const TfArray<8, float> quant32_scale = { 8, { 0.00019929592963308096, 0.00013147777644917369, 0.00015233534213621169, 0.00012319997767917812, 0.0001746456982800737, 0.00013377300638239831, 0.00012558883463498205, 0.00014153118536341935, } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -39,-5,41,-3,-30,-15,17,12,-44,2,-60,-49,-19,-59,-3,-32,29,-30,45,42,-14,33,-37,10,-5,-35,56,-16,-5,-23,11,-1,84,27,28,-127,17,-2,-29,-25,-1,-15,47,41,36,16,16,-4, 
  /* [1][0][][] */ 4,50,64,-26,-11,51,-53,-23,8,27,-22,-92,3,104,-15,63,-11,15,-19,-53,3,-56,-39,9,-60,-15,-9,-113,-37,-44,21,-48,55,68,-56,-5,127,-24,11,56,-26,32,-87,-16,115,-17,-21,-35, 
  /* [2][0][][] */ -12,-25,-49,16,1,51,10,-7,5,43,8,19,43,-67,14,-53,31,-84,23,12,-18,52,-9,29,-25,55,-7,-52,14,15,29,-66,-26,-76,20,-26,84,32,-4,-49,13,33,66,25,127,14,16,21, 
  /* [3][0][][] */ 3,17,-67,57,-1,-43,-84,-99,2,-27,-32,-9,-5,31,32,84,-14,9,-40,11,4,-98,27,-71,-64,-19,127,-25,-46,4,-76,21,15,-79,22,-16,-18,-43,-22,111,-59,-25,-8,20,30,14,-42,44, 
  /* [4][0][][] */ -23,-41,-11,7,27,-33,-5,-11,36,-23,59,-69,1,30,9,14,-21,-23,21,-6,1,-32,12,-17,16,1,37,43,25,16,-19,21,-11,-5,-3,-5,-63,78,24,-26,38,-20,-19,-21,-63,13,127,-3, 
  /* [5][0][][] */ 42,-42,-3,-2,36,-29,17,-127,38,-25,-3,102,-69,73,30,-56,5,-95,12,-6,-24,50,-27,-47,-59,89,-14,-8,-15,59,-39,-44,34,53,32,0,-32,-14,-35,-33,25,-26,-40,-9,-24,44,95,7, 
  /* [6][0][][] */ 57,-11,26,-11,-50,-14,-32,11,-37,3,-45,127,-49,-34,-15,53,16,50,9,50,24,-80,-33,25,18,40,-79,14,0,-41,13,36,6,30,-17,0,4,7,6,-7,-1,-20,25,61,2,-50,75,-15, 
  /* [7][0][][] */ -31,2,-10,65,29,30,2,25,23,-5,62,-5,105,92,54,42,39,43,-9,-3,21,-29,-88,-25,10,-12,-25,60,30,-30,-26,-6,51,10,36,-97,-68,35,47,50,-29,33,75,127,-60,-35,-100,68, 
};
const TfArray<8, float> quant33_scale = { 8, { 0.0084700770676136017, 0.0055878055281937122, 0.0064742518588900566, 0.0052359988912940025, 0.0074224420823156834, 0.0056853527203202248, 0.005337525624781847, 0.0060150753706693649, } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 9416, 5146, 4216, 3676, 1355, 1646, -1024, 29846, -826, 501, 8396, 45239, 5065, 5280, 352, 8774, 43, 19833, 1210, 7051, 6654, 1154, 7525, -12815, 8811, 2871, 2834, 13112, 2576, -564, -8487, 10323, 7192, 2099, -2789, 4559, -7620, 10510, -4613, 18779, -5654, 4369, 6145, 262, -1756, -1161, 3421, 1811, };
const TfArray<48, float> quant34_scale = { 48, { 8.719468314666301e-05, 0.00012754079943988472, 0.00017032628238666803, 0.00017300096806138754, 0.00048888509627431631, 0.00015410782361868769, 0.00015853444347158074, 8.5554172983393073e-05, 0.00013498085900209844, 6.5165135310962796e-05, 5.839272853336297e-05, 6.3984902226366103e-05, 6.8417037255130708e-05, 7.3888266342692077e-05, 0.0001641955750528723, 0.00019419511954765767, 9.7735362942330539e-05, 0.00037520853220485151, 0.00013424201461020857, 0.0001329791994066909, 7.8234632383100688e-05, 0.00039993863902054727, 0.00016532452718820423, 0.00018571315740700811, 0.00012392122880555689, 0.00011271941912127659, 7.7900862379465252e-05, 8.1579040852375329e-05, 0.00016497309843543917, 0.00087754026753827929, 0.0002394987823208794, 8.5415165813174099e-05, 0.00014803740486968309, 0.00013829997624270618, 0.00013269542250782251, 6.9014124164823443e-05, 7.9236786405090243e-05, 4.1241491999244317e-05, 0.0001368028752040118, 6.4604268118273467e-05, 0.0001175036231870763, 0.00012029916979372501, 6.5704160078894347e-05, 0.00010789349471451715, 7.5828582339454442e-05, 0.0002590683288872242, 7.9022254794836044e-05, 0.00021856921375729144, } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -1,-43,-25,-2,127,-72,25,-99,-112,-98,-1,-29,127,8,61,-127,52,-41,-17,-12,-73,-24,12,21,-33,62,35,-12,76,-62,42,-7,-127,-85,56,88,19,93,110,-66,-127,-42,29,81,64,-126,56,54, -22,-116,-99,8,-71,127,84,-59,-61,62,88,-94,119,82,81,-53,-91,-85,-27,-50,-85,22,-22,107,-85,99,79,-125,69,-29,1,-69,-59,-88,87,127,127,120,127,-37,-73,-64,45,74,73,120,63,40, 6,-127,-41,66,-63,-37,26,32,71,36,69,-54,33,32,-30,17,-101,-20,38,-1,-13,-90,-84,29,-36,13,-5,-56,30,28,127,-3,-12,0,14,46,52,68,59,20,14,83,60,53,68,27,18,-126, 
  /* [0][1][][] */ -64,-103,-32,-91,-80,-86,77,-127,-125,-127,116,-54,96,58,-122,-113,127,-127,-58,-81,-127,82,-55,37,-35,120,79,-33,-127,-54,30,-57,-67,-127,-127,83,38,85,44,-91,66,-43,89,121,109,124,107,-127, -106,-85,-127,-127,-47,118,127,-110,105,97,127,-127,109,127,28,-84,23,-111,-126,-127,-110,127,-100,127,-125,127,127,-127,-127,127,-34,-127,-78,-101,57,123,118,127,25,-127,112,-127,127,127,127,0,127,84, -73,-37,-112,94,73,-55,24,31,37,19,21,-22,15,63,79,-5,-15,-7,-22,-80,-65,-50,-110,-6,-127,10,23,-82,-49,24,100,-69,-42,-7,46,94,72,101,15,-29,56,116,94,16,54,-58,24,13, 
  /* [0][2][][] */ -127,3,20,38,-73,-64,67,-8,44,-36,7,-27,20,29,-66,6,-89,-55,127,-12,-18,-13,-127,4,-40,102,37,-26,-8,67,5,-45,4,-79,-40,37,-3,22,-79,-71,51,-53,49,41,77,58,36,-78, -68,-79,-62,-110,96,16,15,-75,127,51,-34,-84,25,56,-127,-46,15,-28,74,-30,7,117,-74,73,-67,67,26,-59,17,-10,-81,-80,-67,-28,-58,61,23,67,-100,-59,81,-77,77,63,31,-127,35,-38, -45,-30,-66,-56,7,-5,5,11,-57,-10,1,-11,-20,20,62,-27,26,18,-8,-42,-34,75,23,-32,-26,41,12,-41,20,-72,54,-41,-99,16,25,59,45,8,-46,-54,28,54,19,82,0,17,12,40, 
};
const TfArray<48, float> quant35_scale = { 48, { 0.0037057739682495594, 0.0054204841144382954, 0.0072388667613267899, 0.0073525412008166313, 0.020777616649866104, 0.0065495823509991169, 0.0067377137020230293, 0.0036360521335154772, 0.0057366862893104553, 0.0027695181779563427, 0.0024816908407956362, 0.0027193583082407713, 0.0029077241197228432, 0.0031402511522173882, 0.0069783120416104794, 0.0082532921805977821, 0.0041537526994943619, 0.015946362167596817, 0.0057052853517234325, 0.0056516160257160664, 0.003324971767142415, 0.016997391358017921, 0.0070262923836708069, 0.0078928088769316673, 0.0052666519768536091, 0.0047905752435326576, 0.003310786560177803, 0.0034671090543270111, 0.0070113567635416985, 0.03729546070098877, 0.010178698226809502, 0.0036301445215940475, 0.0062915896996855736, 0.0058777485974133015, 0.0056395553983747959, 0.0029331003315746784, 0.0033675634767860174, 0.0017527634045109153, 0.0058141220360994339, 0.0027456814423203468, 0.0049939039163291454, 0.0051127145998179913, 0.0027924268506467342, 0.0045854733325541019, 0.0032227146439254284, 0.011010403744876385, 0.0033584458287805319, 0.0092891911044716835, } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 954, -600, -750, 1852, 14539, 1969, -817, 3787, 2621, 1253, 476, 3778, 918, 194, -399, 760, 2336, 10829, 2359, -619, 452, -1890, 85, 2377, -575, -791, 1367, 2, 4294, 19301, 3030, -42, 868, -26, 1875, -251, -36, -100, 1252, 1022, 1226, 2913, 239, -427, 969, 2293, 512, 352, };
const TfArray<48, float> quant36_scale = { 48, { 0.00047175705549307168, 0.00040478230221197009, 0.00029818175244145095, 0.00025057941093109548, 6.4605068473611027e-05, 0.00033646545489318669, 0.00038678629789501429, 0.00022765580797567964, 0.00022703818103764206, 0.00055468542268499732, 0.00032072930480353534, 0.0002349857531953603, 0.00024249675334431231, 0.00038407742977142334, 0.00041718193097040057, 0.00031430221861228347, 0.00032311983522959054, 9.2460817540995777e-05, 0.00028191169258207083, 0.00040248778532259166, 0.00050661718705669045, 0.00018067323253490031, 0.0004460338968783617, 0.00030822990811429918, 0.00040372455259785056, 0.00076734682079404593, 0.00031836499692872167, 0.00091527844779193401, 0.00020478574151638895, 5.3981675591785461e-05, 0.00025782847660593688, 0.00076140387682244182, 0.00036965447361581028, 0.00040866341441869736, 0.00039152373210527003, 0.00036860970431007445, 0.00051790225552394986, 0.00061245547840371728, 0.00031241870601661503, 0.00053213059436529875, 0.00035958876833319664, 0.00022789614740759134, 0.0003063392941839993, 0.00037543120561167598, 0.00037757630343548954, 0.00027455849340185523, 0.00036134198307991028, 0.00034948275424540043, } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -33,12,-11,-25,-108,-45,-127,10, 
  /* [1][0][][] */ 85,-88,-60,-52,127,-80,100,1, 
  /* [2][0][][] */ -127,83,-63,-114,39,-19,-9,27, 
  /* [3][0][][] */ 61,60,125,39,79,111,127,-29, 
  /* [4][0][][] */ -86,-127,32,-12,-71,-116,65,-103, 
  /* [5][0][][] */ 127,-9,73,73,-53,-20,-5,-15, 
  /* [6][0][][] */ 21,56,127,-27,73,-71,-73,29, 
  /* [7][0][][] */ 29,-12,-127,-29,-56,76,109,-68, 
  /* [8][0][][] */ -35,127,-67,-37,61,108,40,86, 
  /* [9][0][][] */ -8,127,-52,76,10,-90,51,121, 
  /* [10][0][][] */ 4,-127,-4,-54,-71,-113,-59,-82, 
  /* [11][0][][] */ -127,-107,109,57,-24,-74,88,71, 
  /* [12][0][][] */ -32,50,-127,62,41,-57,-87,98, 
  /* [13][0][][] */ 91,-127,97,91,-1,40,40,-41, 
  /* [14][0][][] */ 3,38,0,-127,-30,-103,12,-84, 
  /* [15][0][][] */ 32,127,16,-27,37,-81,69,-118, 
  /* [16][0][][] */ -114,-127,-30,55,-20,-7,-41,58, 
  /* [17][0][][] */ -10,-105,-127,94,-58,54,-51,62, 
  /* [18][0][][] */ -97,-110,-40,75,-13,75,10,127, 
  /* [19][0][][] */ 52,-115,91,-127,-19,-94,11,-24, 
  /* [20][0][][] */ 0,31,-5,41,13,127,67,9, 
  /* [21][0][][] */ 12,115,13,-23,39,-90,92,-127, 
  /* [22][0][][] */ 42,6,127,6,-5,106,36,-63, 
  /* [23][0][][] */ -79,-55,50,-73,78,127,-88,-125, 
  /* [24][0][][] */ -109,-101,25,-80,103,93,-15,-127, 
  /* [25][0][][] */ 127,21,-56,-14,21,31,-57,-6, 
  /* [26][0][][] */ -107,-26,-127,-22,-50,-50,16,-6, 
  /* [27][0][][] */ 79,34,1,-63,-127,-14,86,92, 
  /* [28][0][][] */ -127,-81,13,28,-67,-91,-16,21, 
  /* [29][0][][] */ 76,127,13,-94,28,41,-67,-41, 
  /* [30][0][][] */ -93,-50,48,-86,113,122,-84,-127, 
  /* [31][0][][] */ 52,31,4,127,-14,-84,12,-2, 
  /* [32][0][][] */ -14,127,-2,3,33,66,-11,28, 
  /* [33][0][][] */ -22,127,-70,14,7,-42,-21,-3, 
  /* [34][0][][] */ -127,-82,-49,83,-33,-9,19,62, 
  /* [35][0][][] */ -63,96,-30,-12,53,127,55,75, 
  /* [36][0][][] */ 79,32,8,-29,-127,-39,98,96, 
  /* [37][0][][] */ -55,115,16,35,-127,101,-31,-98, 
  /* [38][0][][] */ 64,26,59,28,127,106,108,60, 
  /* [39][0][][] */ -26,-67,24,-13,22,32,-108,127, 
  /* [40][0][][] */ -79,-60,-127,65,-48,-27,30,32, 
  /* [41][0][][] */ 118,-38,74,127,-91,20,14,-18, 
  /* [42][0][][] */ -54,12,-66,-127,86,-125,13,62, 
  /* [43][0][][] */ 35,-20,95,-20,37,127,104,1, 
  /* [44][0][][] */ -32,-26,-67,127,29,-3,-48,-53, 
  /* [45][0][][] */ 78,127,82,-53,32,-61,-16,-80, 
  /* [46][0][][] */ -33,-127,-59,38,-13,30,-64,103, 
  /* [47][0][][] */ 21,59,127,-28,82,96,77,-16, 
};
const TfArray<48, float> quant37_scale = { 48, { 0.0047561782412230968, 0.004080949816852808, 0.0030062200967222452, 0.0025263009592890739, 0.00065133784664794803, 0.0033921902067959309, 0.0038995170034468174, 0.0022951890714466572, 0.0022889622487127781, 0.0055922488681972027, 0.0032335410360246897, 0.0023690883535891771, 0.0024448130279779434, 0.0038722064346075058, 0.0042059607803821564, 0.0031687442678958178, 0.0032576420344412327, 0.00093217502580955625, 0.0028421881143003702, 0.0040578166954219341, 0.0051076323725283146, 0.001821518293581903, 0.0044968416914343834, 0.0031075240112841129, 0.0040702857077121735, 0.00773626659065485, 0.0032097045332193375, 0.0092276893556118011, 0.0020646166522055864, 0.00054423452820628881, 0.002599384868517518, 0.0076763508841395378, 0.0037267967127263546, 0.0041200784035027027, 0.0039472789503633976, 0.0037162634544074535, 0.0052214069291949272, 0.0061746770516037941, 0.0031497548334300518, 0.0053648543544113636, 0.0036253158468753099, 0.002297612139955163, 0.0030884633306413889, 0.0037850367370992899, 0.0038066632114350796, 0.0027680543716996908, 0.0036429914180189371, 0.0035234284587204456, } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { -6838, -3740, 11227, -11114, 22597, 6475, -10707, 11553, };
const TfArray<8, float> quant38_scale = { 8, { 0.00017948616005014628, 0.00024532631505280733, 0.00017336303426418453, 0.00023770594270899892, 0.00020396505715325475, 0.00018066995835397393, 0.00012691719166468829, 0.00027503521414473653, } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 7,-28,-19,-71,-31,-33,14,-33,38,14,-32,-5,101,127,-18,-102, 
  /* [1][0][][] */ 127,-52,-36,21,-35,57,-66,-45,-41,79,-24,-40,-12,3,-55,-13, 
  /* [2][0][][] */ -31,-84,42,38,37,-64,-70,-18,29,-77,25,-127,37,-4,-47,19, 
  /* [3][0][][] */ 27,12,13,25,0,65,-48,-3,127,35,8,25,17,-21,11,22, 
  /* [4][0][][] */ -90,-23,-25,-98,-17,32,50,-109,22,-23,-46,-36,-127,24,-41,-39, 
  /* [5][0][][] */ 85,48,65,-40,45,-68,-109,-127,-11,-91,57,50,-49,46,77,-55, 
  /* [6][0][][] */ 105,56,-127,-71,30,-76,10,-74,-37,16,-121,94,106,-93,14,73, 
  /* [7][0][][] */ -127,-2,90,-28,-55,-10,-2,-53,-40,46,85,-30,56,-25,29,21, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0076281614601612091, 0.010426368564367294, 0.0073679289780557156, 0.010102502070367336, 0.0086685148999094963, 0.0076784729026257992, 0.0053939805366098881, 0.011688996106386185, } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { 18869, -283, 816, 3758, -2854, 194, 8909, 1759, 1008, 880, -2158, 1333, -2650, -1466, -616, -1149, };
const TfArray<16, float> quant40_scale = { 16, { 0.00012230056745465845, 0.00026065792189911008, 0.00015105964848771691, 0.00015273160533979535, 0.00080147135304287076, 0.00045223854249343276, 0.00015869589697103947, 0.00066583033185452223, 0.00032066303538158536, 0.0010079628555104136, 0.00024899368872866035, 0.0002493079227861017, 0.00010841571202035993, 0.00015251166769303381, 0.00023424337268806994, 0.00061162043130025268, } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 7,-9,6,6,-15,12,18,17,-15,-13,3,-17,0,0,5,0, 14,-4,5,3,17,-1,16,-26,-19,8,-2,94,6,26,-8,-1, 5,-6,-10,1,7,-11,4,9,6,2,2,-17,2,2,-7,-3, 
  /* [0][1][][] */ 15,-15,6,1,127,-22,-127,-21,127,127,4,-4,107,-21,-9,-20, -127,127,127,-8,-78,-89,-22,-102,7,-109,127,127,127,127,127,127, 15,-7,-13,0,-5,127,8,-12,-3,-14,-11,-22,8,1,-11,-14, 
  /* [0][2][][] */ 2,-4,-4,-24,-10,16,61,7,-14,-10,-6,-3,2,1,4,-10, 24,-12,-16,-127,13,-15,-2,127,-12,-1,0,-10,-14,-57,-21,-36, 1,-10,-25,-7,7,-4,3,-5,0,1,-11,-18,4,-2,-13,-13, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0051977741532027721, 0.011077961884438992, 0.0064200349152088165, 0.0064910929650068283, 0.034062530845403671, 0.019220137968659401, 0.0067445756867527962, 0.02829778753221035, 0.013628179207444191, 0.04283842071890831, 0.010582231916487217, 0.010595587082207203, 0.0046076676808297634, 0.0064817457459867001, 0.0099553428590297699, 0.025993866845965385, } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&g0::quant8_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { 1081, 781, -1080, 4477, 31477, 6300, 4001, 444, 5558, 2268, 262, 1959, 3492, -14919, -1126, 23892, };
const TfArray<16, float> quant42_scale = { 16, { 0.00038767457590438426, 0.0012808785540983081, 0.00043522988562472165, 0.00026115681976079941, 4.816652653971687e-05, 0.00013553902681451291, 0.00020835881878156215, 8.6575360910501331e-05, 0.00021518228459171951, 8.1877209595404565e-05, 0.00080417236313223839, 0.00070154707645997405, 0.00047019973862916231, 3.8167214370332658e-05, 0.00084113719640299678, 6.8638291850220412e-05, } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -88, -112, -31, 
  /* [0][1][][] */ 64, -39, 16, 
  /* [0][2][][] */ 29, 127, 21, 
  /* [1][0][][] */ 102, -95, -12, 
  /* [1][1][][] */ -127, 101, 23, 
  /* [1][2][][] */ 13, 0, -11, 
  /* [2][0][][] */ -22, 0, -45, 
  /* [2][1][][] */ 37, 95, 127, 
  /* [2][2][][] */ -10, -91, -76, 
  /* [3][0][][] */ 107, 112, 50, 
  /* [3][1][][] */ -5, -27, -19, 
  /* [3][2][][] */ -103, -127, -46, 
  /* [4][0][][] */ 14, -39, 25, 
  /* [4][1][][] */ 21, -127, 8, 
  /* [4][2][][] */ 41, -92, -23, 
  /* [5][0][][] */ -51, 76, 39, 
  /* [5][1][][] */ -127, 59, 31, 
  /* [5][2][][] */ -83, 52, 30, 
  /* [6][0][][] */ -18, 77, 127, 
  /* [6][1][][] */ -51, 53, -15, 
  /* [6][2][][] */ -37, -53, -90, 
  /* [7][0][][] */ 5, 4, -35, 
  /* [7][1][][] */ 127, 60, -29, 
  /* [7][2][][] */ 47, 1, -45, 
  /* [8][0][][] */ -23, -33, 52, 
  /* [8][1][][] */ -58, -92, 127, 
  /* [8][2][][] */ -30, -66, 95, 
  /* [9][0][][] */ -22, 38, -22, 
  /* [9][1][][] */ -3, 127, -23, 
  /* [9][2][][] */ -7, 66, -18, 
  /* [10][0][][] */ 25, 88, 12, 
  /* [10][1][][] */ -36, -127, -29, 
  /* [10][2][][] */ 13, 41, 18, 
  /* [11][0][][] */ 5, -22, 7, 
  /* [11][1][][] */ 63, -98, 33, 
  /* [11][2][][] */ -89, 127, -50, 
  /* [12][0][][] */ -41, 50, -9, 
  /* [12][1][][] */ -127, 115, 6, 
  /* [12][2][][] */ -78, 80, 5, 
  /* [13][0][][] */ 88, 51, 9, 
  /* [13][1][][] */ 127, 85, -8, 
  /* [13][2][][] */ 59, 37, 33, 
  /* [14][0][][] */ -30, -27, 48, 
  /* [14][1][][] */ 46, 100, -127, 
  /* [14][2][][] */ -13, -67, 82, 
  /* [15][0][][] */ -73, -27, 26, 
  /* [15][1][][] */ -127, -121, 21, 
  /* [15][2][][] */ -22, -67, 4, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.098857007920742035, 0.32662400603294373, 0.11098361760377884, 0.066594988107681274, 0.012282463721930981, 0.034562449902296066, 0.053131494671106339, 0.022076716646552086, 0.054871480911970139, 0.020878687500953674, 0.20506393909454346, 0.17889449000358582, 0.11990092694759369, 0.009732639417052269, 0.21448996663093567, 0.017502764239907265, } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.099188260734081268, } };
const TfArray<1, int> quant46_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.069843754172325134, } };
const TfArray<1, int> quant50_zero = { 1, { -30 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<1, float> quant53_scale = { 1, { 0.054897256195545197, } };
const TfArray<1, int> quant53_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<1, float> quant54_scale = { 1, { 0.090204976499080658, } };
const TfArray<1, int> quant54_zero = { 1, { -25 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.060075700283050537, } };
const TfArray<1, int> quant58_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant61_scale = { 1, { 0.051848664879798889, } };
const TfArray<1, int> quant61_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<1, float> quant62_scale = { 1, { 0.082616709172725677, } };
const TfArray<1, int> quant62_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<1, float> quant65_scale = { 1, { 0.056609537452459335, } };
const TfArray<1, int> quant65_zero = { 1, { 28 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<1, float> quant66_scale = { 1, { 0.099360480904579163, } };
const TfArray<1, int> quant66_zero = { 1, { 18 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.0617520771920681, } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.11146719753742218, } };
const TfArray<1, int> quant69_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 432), (TfLiteIntArray*)&g0::tensor_dimension69, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension69, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_813104_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_813104_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_813104_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_813104_3_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_813104_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
